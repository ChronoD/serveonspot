{"version":3,"sources":["state/appSlice.ts","state/hooks.ts","state/customerSlice.ts","components/CustomerAppointmentInformation.tsx","components/CustomerSpecialists.tsx","containers/CustomerPanel.tsx","components/StaffAppointments.tsx","components/StaffPanelLogIn.tsx","state/staffSlice.ts","components/StaffPanelLogOut.tsx","containers/StaffPanel.tsx","containers/MainPanel.tsx","state/store.ts","App.tsx","reportWebVitals.ts","index.tsx","functions/apiFunctions.ts"],"names":["initialState","customerMode","authenticationHeader","undefined","userInfo","appSlice","createSlice","name","reducers","toggleAppointmentMode","state","actions","useAppSelector","useSelector","gettingSpecialists","gettingSpecialistsError","specialists","postingAppointment","appointmentError","appointmentInfo","unregisteringAppointment","unregisteringAppointmentError","customerSlice","specialistsSuccess","action","payload","specialistsError","postingAppointmentSuccess","postingAppointmentError","unregistering","unregisteringSuccess","unregisteringError","CustomerAppointmentInformation","unregisterAppointment","appointmentId","message","specialist","specialistInfo","onClick","loading","CustomerSpecialists","registerAppointment","registering","registeringError","length","itemLayout","size","dataSource","renderItem","spec","Item","title","specialistId","style","border","specialistType","CustomerPanel","customer","dispatch","useDispatch","trackAppointmentSuccess","closeSpecs","specialistsSource","console","log","close","closeAppointment","appointmentSource","useEffect","initializeSpecialistsSource","error","addEventListener","initializeTrackedAppointmentSource","loadingSpecialists","loadingSpecialistsError","StaffAppointments","staff","useState","appointments","setAppointments","updateAppointments","source","initializeAppointmentsSource","map","a","started","layout","labelCol","span","wrapperCol","tailLayout","offset","StaffPanelLogIn","onSubmit","initialValues","remember","onFinish","label","rules","required","Password","type","htmlType","staffSlice","postAppointment","setUserInfoAndAuthenticationHeader","header","unsetUserInfoAndAuthenticationHeader","selectAuthenticationHeader","StaffPanelLogOut","cancelAxiosInterceptors","StaffPanel","isAuthenticated","setHeaderAndUserInfo","values","authenticateStaffMember","MainPanel","app","store","configureStore","reducer","appReducer","customerReducer","staffReducer","middleware","getDefaultMiddleware","serializableCheck","App","className","FallbackComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","onSuccess","onError","axios","post","headers","res","data","catch","appointmentsSource","EventSource","onerror","readyState","setTimeout","onmessage","JSON","parse","patch","status","loginDetais","setAuthHeader","authToken","loginDetails","username","password","unencodedDetails","Buffer","from","toString","createBasicAuthToken","get","authorization","interceptors","request","use","setCustomers","EventSourcePolyfill","Error"],"mappings":"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","file":"static/js/main.3124b117.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, UserInfo } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface AppState {\r\n  customerMode: boolean;\r\n  authenticationHeader: string | undefined;\r\n  userInfo: UserInfo | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: AppState = {\r\n  customerMode: true,\r\n  authenticationHeader: undefined,\r\n  userInfo: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    toggleAppointmentMode: (state) => {\r\n      state.customerMode = !state.customerMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleAppointmentMode } = appSlice.actions;\r\n\r\nexport const selectAppointmentMode = (state: RootState) =>\r\n  state.app.customerMode;\r\n\r\nexport default appSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, AppointmentInfo, Specialist } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface CustomerState {\r\n  gettingSpecialists: boolean;\r\n  gettingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[] | undefined;\r\n  postingAppointment: boolean;\r\n  appointmentError: Error | undefined;\r\n  appointmentInfo: AppointmentInfo | undefined;\r\n  unregisteringAppointment: boolean;\r\n  unregisteringAppointmentError: Error | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CustomerState = {\r\n  gettingSpecialists: false,\r\n  gettingSpecialistsError: undefined,\r\n  specialists: undefined,\r\n  postingAppointment: false,\r\n  appointmentError: undefined,\r\n  appointmentInfo: undefined,\r\n  unregisteringAppointment: false,\r\n  unregisteringAppointmentError: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const customerSlice = createSlice({\r\n  name: \"customer\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    gettingSpecialists: (state) => {\r\n      state.gettingSpecialists = true;\r\n    },\r\n    specialistsSuccess: (state, action: PayloadAction<Specialist[]>) => {\r\n      state.gettingSpecialists = false;\r\n      state.specialists = action.payload;\r\n    },\r\n    specialistsError: (state, action: PayloadAction<Error>) => {\r\n      state.gettingSpecialists = false;\r\n      state.appointmentError = action.payload;\r\n    },\r\n    postingAppointment: (state) => {\r\n      state.postingAppointment = true;\r\n    },\r\n    postingAppointmentSuccess: (\r\n      state,\r\n      action: PayloadAction<AppointmentInfo>\r\n    ) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentInfo = action.payload;\r\n    },\r\n    postingAppointmentError: (state, action: PayloadAction<Error>) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentError = action.payload;\r\n    },\r\n    unregistering: (state) => {\r\n      state.unregisteringAppointment = true;\r\n    },\r\n    unregisteringSuccess: (state) => {\r\n      state.appointmentInfo = undefined;\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringAppointmentError = undefined;\r\n    },\r\n    unregisteringError: (state, action: PayloadAction<Error>) => {\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringAppointmentError = action.payload;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const {\r\n  postingAppointment,\r\n  postingAppointmentSuccess,\r\n  postingAppointmentError,\r\n  gettingSpecialists,\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  unregistering,\r\n  unregisteringSuccess,\r\n  unregisteringError,\r\n} = customerSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectSpecialists = (state: RootState) =>\r\n  state.customer.specialists;\r\nexport const selectAppointment = (state: RootState) =>\r\n  state.customer.appointmentInfo;\r\n\r\nexport const selectPostingAppointmentStatus = (state: RootState) =>\r\n  state.customer.postingAppointment;\r\n\r\nexport default customerSlice.reducer;\r\n","import { Button } from \"antd\";\r\nimport { AppointmentInfo } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  appointmentInfo: AppointmentInfo;\r\n  unregisterAppointment: () => void;\r\n  unregistering: boolean;\r\n  unregisteringError: Error | undefined;\r\n}\r\n\r\nexport function CustomerAppointmentInformation({\r\n  appointmentInfo,\r\n  unregisterAppointment,\r\n  unregistering,\r\n}: Props) {\r\n  const { appointmentId, message, specialist } = appointmentInfo;\r\n\r\n  return (\r\n    <div>\r\n      <>\r\n        <div>Vizitas:</div>\r\n        {`Nr. ${appointmentId} pas ${specialist.specialistInfo}`}\r\n      </>\r\n      <div>\r\n        <>\r\n          Informacija:\r\n          <p>{message}</p>\r\n          <Button onClick={unregisterAppointment} loading={unregistering}>\r\n            atšaukti\r\n          </Button>\r\n        </>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, List, Card } from \"antd\";\r\nimport { Specialist } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  registerAppointment: (specialistId: number) => void;\r\n  registering: boolean;\r\n  registeringError: Error | undefined;\r\n  loadingSpecialists: boolean;\r\n  loadingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[];\r\n}\r\n\r\nexport function CustomerSpecialists({\r\n  registerAppointment,\r\n  registering,\r\n  registeringError,\r\n  specialists,\r\n}: Props) {\r\n  return (\r\n    <div>\r\n      {!specialists ? (\r\n        \"Laukiama duomenų\"\r\n      ) : (\r\n        <>\r\n          {specialists.length && (\r\n            <>\r\n              <div>Dirbantys specialistai:</div>\r\n              <List\r\n                itemLayout=\"vertical\"\r\n                size=\"large\"\r\n                dataSource={specialists}\r\n                renderItem={(spec) => (\r\n                  <List.Item>\r\n                    <Card\r\n                      title={spec.specialistId}\r\n                      style={{ border: \"5px solid green\" }}\r\n                    >\r\n                      <>{spec.specialistType}</>\r\n                      <Button\r\n                        onClick={() => registerAppointment(spec.specialistId)}\r\n                        loading={registering}\r\n                      >\r\n                        Registruotis {spec.specialistId}\r\n                      </Button>\r\n                    </Card>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {specialists.length === 0 && \"Šiuo metu nėra dirbančių specialistų\"}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  postingAppointmentError,\r\n  postingAppointmentSuccess,\r\n  unregisteringSuccess,\r\n  unregisteringError,\r\n} from \"../state/customerSlice\";\r\nimport {\r\n  initializeSpecialistsSource,\r\n  initializeTrackedAppointmentSource,\r\n  registerAppointment,\r\n  unregisterAppointment,\r\n} from \"../functions/apiFunctions\";\r\nimport { AppointmentInfo, Specialist } from \"../state/dataTypes\";\r\nimport { CustomerAppointmentInformation } from \"../components/CustomerAppointmentInformation\";\r\nimport { CustomerSpecialists } from \"../components/CustomerSpecialists\";\r\n\r\ninterface Props {}\r\n\r\nexport function CustomerPanel({}: Props) {\r\n  const {\r\n    gettingSpecialists,\r\n    gettingSpecialistsError,\r\n    specialists,\r\n    postingAppointment,\r\n    appointmentError,\r\n    appointmentInfo,\r\n    unregisteringAppointment,\r\n    unregisteringAppointmentError,\r\n  } = useAppSelector((state) => state.customer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function registerWithSpecialist(specialistId: number) {\r\n    registerAppointment(\r\n      specialistId,\r\n      (appointmentInfo: AppointmentInfo) =>\r\n        dispatch(postingAppointmentSuccess(appointmentInfo)),\r\n      (error: Error) => dispatch(postingAppointmentError(error))\r\n    );\r\n  }\r\n\r\n  function trackAppointmentSuccess(appointmentInfo: AppointmentInfo) {\r\n    dispatch(postingAppointmentSuccess(appointmentInfo));\r\n    closeSpecs();\r\n  }\r\n\r\n  let specialistsSource: EventSource | null = null;\r\n\r\n  function closeSpecs() {\r\n    console.log(\"closing specialists\");\r\n    specialistsSource && specialistsSource.close();\r\n  }\r\n\r\n  function closeAppointment() {\r\n    console.log(\"closing appointments\");\r\n\r\n    appointmentSource && appointmentSource.close();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!appointmentInfo) {\r\n      specialistsSource = initializeSpecialistsSource(\r\n        (specialists: Specialist[]) =>\r\n          dispatch(specialistsSuccess(specialists)),\r\n        (error: Error) => dispatch(specialistsError(error))\r\n      );\r\n      specialistsSource.addEventListener(\"close\", () =>\r\n        specialistsSource?.close()\r\n      );\r\n    } else {\r\n      closeSpecs();\r\n    }\r\n    return () => {\r\n      closeSpecs();\r\n    };\r\n  }, [appointmentInfo]);\r\n\r\n  function unregister(appointmentId: number) {\r\n    // dispatch(unregisteringAppointment);\r\n    unregisterAppointment(\r\n      appointmentId,\r\n      () => dispatch(unregisteringSuccess()),\r\n      (error: Error) => dispatch(unregisteringError(error))\r\n    );\r\n  }\r\n\r\n  let appointmentSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (appointmentInfo) {\r\n      appointmentSource = initializeTrackedAppointmentSource(\r\n        appointmentInfo.appointmentId,\r\n        trackAppointmentSuccess\r\n      );\r\n\r\n      return () => {\r\n        closeAppointment();\r\n      };\r\n    }\r\n  }, [appointmentInfo]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      closeAppointment();\r\n      closeSpecs();\r\n    };\r\n  }, [appointmentInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {specialists && !appointmentInfo && (\r\n        <CustomerSpecialists\r\n          registerAppointment={registerWithSpecialist}\r\n          registering={postingAppointment}\r\n          registeringError={appointmentError}\r\n          loadingSpecialists={gettingSpecialists}\r\n          loadingSpecialistsError={gettingSpecialistsError}\r\n          specialists={specialists}\r\n        />\r\n      )}\r\n      {appointmentInfo && (\r\n        <CustomerAppointmentInformation\r\n          appointmentInfo={appointmentInfo}\r\n          unregisterAppointment={() =>\r\n            unregister(appointmentInfo.appointmentId)\r\n          }\r\n          unregistering={unregisteringAppointment}\r\n          unregisteringError={unregisteringAppointmentError}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  initializeAppointmentsSource,\r\n  unregisterAppointment,\r\n} from \"../functions/apiFunctions\";\r\nimport { Appointment } from \"../state/dataTypes\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\n\r\ninterface Props {}\r\n\r\nexport function StaffAppointments({}: Props) {\r\n  const { authenticationHeader } = useAppSelector((state) => state.staff);\r\n\r\n  const [appointments, setAppointments] = useState<Appointment[] | undefined>(\r\n    undefined\r\n  );\r\n\r\n  function updateAppointments(appointments: Appointment[]): void {\r\n    return setAppointments(appointments);\r\n  }\r\n\r\n  console.log(appointments);\r\n\r\n  useEffect(() => {\r\n    const source = initializeAppointmentsSource(\r\n      updateAppointments,\r\n      authenticationHeader\r\n    );\r\n    return () => {\r\n      console.log(\"closing appmt\");\r\n\r\n      source.close();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!appointments ? (\r\n        \"Laukiama duomenų\"\r\n      ) : (\r\n        <>\r\n          <div>Vizitai:</div>\r\n          {appointments.length &&\r\n            appointments.map((a: Appointment) => (\r\n              <div key={a.appointmentId}>\r\n                <p key={a.appointmentId}>{`${a.appointmentId} ${\r\n                  a.started ? \"vyksta\" : \"laukia\"\r\n                } `}</p>\r\n              </div>\r\n            ))}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Form, Input } from \"antd\";\r\nimport { LoginDetails } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  onSubmit: (values: LoginDetails) => void;\r\n}\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport function StaffPanelLogIn({ onSubmit }: Props) {\r\n  return (\r\n    <Form\r\n      {...layout}\r\n      name=\"basic\"\r\n      initialValues={{ remember: true }}\r\n      onFinish={onSubmit}\r\n    >\r\n      <Form.Item\r\n        label=\"Vartotojo vardas\"\r\n        name=\"username\"\r\n        rules={[{ required: true, message: \"Vartotojo vardas būtinas!\" }]}\r\n      >\r\n        <Input />\r\n      </Form.Item>\r\n\r\n      <Form.Item\r\n        label=\"Slaptažodis\"\r\n        name=\"password\"\r\n        rules={[{ required: true, message: \"Slaptažodis būtinas!\" }]}\r\n      >\r\n        <Input.Password />\r\n      </Form.Item>\r\n      <Form.Item {...tailLayout}>\r\n        <Button type=\"primary\" htmlType=\"submit\">\r\n          Prisijungti\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, UserInfo } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface StaffState {\r\n  authenticationHeader: string | undefined;\r\n  userInfo: UserInfo | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: StaffState = {\r\n  authenticationHeader: undefined,\r\n  userInfo: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const staffSlice = createSlice({\r\n  name: \"staff\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    postAppointment: (state) => {\r\n      // state.value += 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    setUserInfoAndAuthenticationHeader: (\r\n      state,\r\n      action: PayloadAction<{ userInfo: UserInfo; header: string }>\r\n    ) => {\r\n      const { userInfo, header } = action.payload;\r\n      state.authenticationHeader = header;\r\n      state.userInfo = userInfo;\r\n    },\r\n    unsetUserInfoAndAuthenticationHeader: (state, action: PayloadAction) => {\r\n      state.authenticationHeader = undefined;\r\n      state.userInfo = undefined;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setUserInfoAndAuthenticationHeader,\r\n  unsetUserInfoAndAuthenticationHeader,\r\n} = staffSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAuthenticationHeader = (state: RootState) =>\r\n  state.staff.authenticationHeader;\r\n\r\nexport const selectAppointmentMode = (state: RootState) =>\r\n  state.app.customerMode;\r\n\r\nexport default staffSlice.reducer;\r\n","import { Button } from \"antd\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { cancelAxiosInterceptors } from \"../functions/apiFunctions\";\r\nimport { unsetUserInfoAndAuthenticationHeader } from \"../state/staffSlice\";\r\ninterface Props {}\r\n\r\nexport function StaffPanelLogOut({}: Props) {\r\n  const dispatch = useDispatch();\r\n  function logOut(): void {\r\n    dispatch(unsetUserInfoAndAuthenticationHeader());\r\n    cancelAxiosInterceptors();\r\n  }\r\n\r\n  return <Button onClick={logOut}>Atsijungti</Button>;\r\n}\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { StaffAppointments } from \"../components/StaffAppointments\";\r\nimport { StaffPanelLogIn } from \"../components/StaffPanelLogIn\";\r\nimport { StaffPanelLogOut } from \"../components/StaffPanelLogOut\";\r\nimport { authenticateStaffMember } from \"../functions/apiFunctions\";\r\nimport { LoginDetails, UserInfo } from \"../state/dataTypes\";\r\nimport {\r\n  selectAuthenticationHeader,\r\n  setUserInfoAndAuthenticationHeader,\r\n} from \"../state/staffSlice\";\r\n\r\ninterface Props {}\r\n\r\nexport function StaffPanel({}: Props) {\r\n  const isAuthenticated = !!useSelector(selectAuthenticationHeader);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const setHeaderAndUserInfo = (userInfo: UserInfo, header: string) =>\r\n    dispatch(setUserInfoAndAuthenticationHeader({ userInfo, header }));\r\n\r\n  const onSubmit = (values: LoginDetails) => {\r\n    authenticateStaffMember(values, setHeaderAndUserInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {!isAuthenticated && <StaffPanelLogIn onSubmit={onSubmit} />}\r\n      {isAuthenticated && (\r\n        <>\r\n          <StaffAppointments />\r\n          <StaffPanelLogOut />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  selectAppointmentMode,\r\n  toggleAppointmentMode,\r\n} from \"../state/appSlice\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CustomerPanel } from \"./CustomerPanel\";\r\nimport { StaffPanel } from \"./StaffPanel\";\r\n\r\ninterface Props {}\r\n\r\nexport function MainPanel({}: Props) {\r\n  const {\r\n    app: { customerMode },\r\n    customer: { appointmentInfo },\r\n  } = useAppSelector((state) => state);\r\n\r\n  const dispatch = useDispatch();\r\n  function toggleMode() {\r\n    dispatch(toggleAppointmentMode());\r\n  }\r\n  return (\r\n    <div>\r\n      {!appointmentInfo && (\r\n        <Button type=\"primary\" onClick={toggleMode}>\r\n          {customerMode ? \"Darbuotojams\" : \"Grįžti\"}\r\n        </Button>\r\n      )}\r\n      {!customerMode && <StaffPanel />}\r\n      {customerMode && <CustomerPanel />}\r\n    </div>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport appReducer from \"./appSlice\";\r\nimport customerReducer from \"./customerSlice\";\r\nimport staffReducer from \"./staffSlice\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    customer: customerReducer,\r\n    staff: staffReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import \"./App.css\";\r\nimport { MainPanel } from \"./containers/MainPanel\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary FallbackComponent={() => <p>whoops</p>}>\r\n        <Provider store={store}>\r\n          <MainPanel />\r\n        </Provider>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\r\nimport {\r\n  Appointment,\r\n  AppointmentInfo,\r\n  LoginDetails,\r\n  Specialist,\r\n  UserInfo,\r\n} from \"../state/dataTypes\";\r\nimport { NativeEventSource, EventSourcePolyfill } from \"event-source-polyfill\";\r\n\r\nexport function registerAppointment(\r\n  specialistId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void,\r\n  onError: (error: Error) => void\r\n) {\r\n  return axios\r\n    .post(\r\n      `http://localhost:8080/appointments`,\r\n      { specialistId: specialistId },\r\n      {\r\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n      }\r\n    )\r\n    .then((res) => {\r\n      // console.log(res);\r\n      const data = res.data;\r\n      onSuccess(data);\r\n    })\r\n    .catch((error) => {\r\n      // console.log(error);\r\n      onError(error);\r\n    });\r\n}\r\n\r\nexport function initializeTrackedAppointmentSource(\r\n  appointmentId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSource(\r\n    `http://127.0.0.1:8080/appointments/${appointmentId}`\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initializeTrackedAppointmentSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message) => {\r\n    console.log(\"appointment\", message);\r\n\r\n    const data = JSON.parse(message.data);\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function unregisterAppointment(\r\n  appointmentId: number,\r\n  onSuccess: () => void,\r\n  onError: (error: Error) => void\r\n) {\r\n  return axios\r\n    .patch(\r\n      `http://localhost:8080/appointments/${appointmentId}`,\r\n      { status: \"unregister\" },\r\n      {\r\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n      }\r\n    )\r\n    .then((res) => {\r\n      onSuccess();\r\n    })\r\n    .catch((error) => {\r\n      onError(error);\r\n    });\r\n}\r\n\r\nexport function authenticateStaffMember(\r\n  loginDetais: LoginDetails,\r\n  setAuthHeader: (userInfo: UserInfo, header: string) => void\r\n) {\r\n  const authToken = createBasicAuthToken(loginDetais);\r\n  return axios\r\n    .get(`http://localhost:8080/user`, {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: authToken,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      const data = res.data;\r\n      console.log(data);\r\n\r\n      setAuthHeader(data[0], authToken);\r\n      setupAxiosInterceptors(authToken);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n}\r\n\r\nexport function initializeAppointmentsSource(\r\n  setCustomers: (appointments: Appointment[]) => void,\r\n  authToken?: string\r\n): EventSource {\r\n  const appointmentsSource = new EventSourcePolyfill(\r\n    \"http://127.0.0.1:8080/appointments\",\r\n    {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: `${authToken}`,\r\n      },\r\n    }\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initializeAppointmentsSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message: any) => {\r\n    const data = JSON.parse(message.data);\r\n    setCustomers(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function initializeSpecialistsSource(\r\n  onSuccess: (specialists: Specialist[]) => void,\r\n  onError: (error: Error) => void\r\n): EventSource {\r\n  const specialistsSource = new EventSource(\r\n    \"http://127.0.0.1:8080/specialists\"\r\n  );\r\n  specialistsSource.onerror = () => {\r\n    onError(new Error(\"Nepavyko gauti specialistų\"));\r\n    if (specialistsSource.readyState === 2) {\r\n      setTimeout(initializeSpecialistsSource, 300);\r\n    }\r\n  };\r\n  specialistsSource.onmessage = (message) => {\r\n    // console.log(message);\r\n    const data = JSON.parse(message.data);\r\n    onSuccess(data);\r\n  };\r\n  return specialistsSource;\r\n}\r\n\r\nfunction createBasicAuthToken(loginDetails: LoginDetails) {\r\n  const { username, password } = loginDetails;\r\n  const unencodedDetails = username + \":\" + password;\r\n  return \"Basic \" + Buffer.from(unencodedDetails).toString(\"base64\");\r\n}\r\n\r\nfunction setupAxiosInterceptors(header: string) {\r\n  // const { userAuthority, authenticationHeader } = appState;\r\n  axios.interceptors.request.use((request) => {\r\n    // if (userAuthority && authenticationHeader) {\r\n    request.headers.authorization = header;\r\n    // }\r\n    return request;\r\n  });\r\n}\r\n\r\nexport function cancelAxiosInterceptors() {\r\n  // const { userAuthority, authenticationHeader } = appState;\r\n  axios.interceptors.request.use((request) => {\r\n    // if (userAuthority && authenticationHeader) {\r\n    request.headers.authorization = null;\r\n    // }\r\n    return request;\r\n  });\r\n}\r\n"],"sourceRoot":""}