{"version":3,"sources":["state/sliceMainPanel.ts","state/hooks.ts","state/sliceCustomer.ts","functions/apiSourceFunctions.ts","components/customer/AppointmentInformation.tsx","components/customer/SpecialistsList.tsx","containers/CustomerPanel.tsx","components/staff/AppointmentsListCard.tsx","components/staff/AppointmentsList.tsx","components/staff/LogInForm.tsx","components/staff/UserInfo.tsx","state/sliceStaff.ts","containers/StaffPanel.tsx","containers/MainPanel.tsx","state/store.ts","App.tsx","reportWebVitals.ts","index.tsx","functions/utilFunctions.ts"],"names":["mainPanelSlice","createSlice","name","initialState","customerMode","reducers","toggleCustomerMode","state","actions","useAppSelector","useSelector","gettingSpecialists","gettingSpecialistsError","undefined","specialists","registeringAppointment","registeringSpecialistId","registeringError","appointmentInfo","unregisteringAppointment","unregisteringError","registerWithSpecialistApi","createAsyncThunk","specialistId","thunkApi","a","dispatch","setRegisteringSpecialistId","fetch","method","headers","body","JSON","stringify","response","json","data","unregisterWithSpecialistApi","appointmentId","status","customerSlice","specialistsSuccess","action","payload","specialistsError","resetRegisteringError","gettingAppointmentSuccess","gettingAppointmentError","resetUnregisteringError","resetCustomerState","extraReducers","builder","addCase","pending","fulfilled","rejected","error","Error","message","initializeCustomerSpecialistsSource","onSuccess","specialistsSource","EventSource","onerror","readyState","setTimeout","onmessage","parse","initCustomerAppointmentSource","appointmentsSource","initStaffAppointmentsSource","authHeader","onError","EventSourcePolyfill","authorization","AppointmentInformation","unregisterAppointment","unregistering","closeUnregisteringError","returnToMenu","positionOnTheList","specialist","approximateTimeLeft","borderColor","colorByAppointmentStatus","visible","onCancel","footer","title","specialistTypeInfoBySpecialistType","specialistType","style","width","border","type","onClick","loading","CustomerSpecialists","registerAppointment","registering","closeRegisteringError","length","itemLayout","size","dataSource","renderItem","spec","Item","CustomerPanel","customer","useDispatch","watchSpecialistsSuccess","watchAppointmentInfo","useEffect","close","appointmentSource","span","offset","loadingSpecialists","loadingSpecialistsError","AppointmentsListCard","appointment","startAppointment","endAppointment","cancelAppointment","updating","actionsDisabled","isAdmin","specialistTypeInfo","cancelDisabled","startDisabled","fisnishDisabled","bodyStyle","display","extra","disabled","StaffAppointments","userInfo","appointments","appointmentsError","updatingAppointmentId","updatingError","closeUpdatingError","authority","justify","locale","emptyText","index","layout","labelCol","wrapperCol","tailLayout","StaffLogIn","onSubmit","loginError","closeLoginError","initialValues","remember","onFinish","label","rules","required","Password","htmlType","StaffUserInfo","logout","align","toLowerCase","gettingUserInfo","userInfoError","updatingAppointment","updatingAppointmentError","updatedAppointment","loginApi","loginDetais","authToken","createBasicAuthToken","rejectWithValue","setAppointmentStatusApi","input","setUpdatingAppointmentId","getState","staff","staffSlice","setStaffAppointments","setStaffAppointmentsError","resetLoginError","resetUpdatingError","username","meta","arg","password","map","StaffPanel","updateAppointment","watchAppointmentsSuccess","watchAppointmentsError","source","values","MainPanel","mainPanel","minHeight","paddingTop","store","configureStore","reducer","mainPanelReducer","customerReducer","staffReducer","middleware","getDefaultMiddleware","serializableCheck","App","className","FallbackComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","loginDetails","unencodedDetails","Buffer","from","toString"],"mappings":"wQAWaA,EAAiBC,YAAY,CACxCC,KAAM,YACNC,aANmC,CACnCC,cAAc,GAMdC,SAAU,CACRC,mBAAoB,SAACC,GACnBA,EAAMH,cAAgBG,EAAMH,iBAKnBE,EAAuBN,EAAeQ,QAAtCF,mBAKAN,IAAf,QCtBaS,EAAkDC,I,yBCYzDP,EAA8B,CAClCQ,oBAAoB,EACpBC,6BAAyBC,EACzBC,iBAAaD,EACbE,wBAAwB,EACxBC,6BAAyBH,EACzBI,sBAAkBJ,EAClBK,qBAAiBL,EACjBM,0BAA0B,EAC1BC,wBAAoBP,GAGTQ,EAA4BC,YAOvC,oBAPuD,uCAOlC,WAAOC,EAAsBC,GAA7B,iBAAAC,EAAA,6DACrBD,EAASE,SAASC,EAA2BJ,IADxB,SAEEK,MAAM,yCAA0C,CACrEC,OAAQ,OACRC,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEV,aAAcA,MARlB,cAEfW,EAFe,gBAUFA,EAASC,OAVP,cAUfC,EAVe,yBAWdA,GAXc,2CAPkC,yDAqB5CC,EAA8Bf,YAGzC,iCAHyD,uCAGvB,WAAOgB,GAAP,iBAAAb,EAAA,sEACXG,MAAM,0CAAD,OACgBU,GAC1C,CACET,OAAQ,QACRC,QAAS,CACP,8BAA+B,IAC/B,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAAEM,OAAQ,mBATD,cAC5BL,EAD4B,gBAYfA,EAASC,OAZM,cAY5BC,EAZ4B,yBAa3BA,GAb2B,2CAHuB,uDAmB9CI,EAAgBvC,YAAY,CACvCC,KAAM,WACNC,eACAE,SAAU,CACRM,mBAAoB,SAACJ,GACnBA,EAAMI,oBAAqB,GAE7B8B,mBAAoB,SAAClC,EAAOmC,GAC1BnC,EAAMI,oBAAqB,EAC3BJ,EAAMO,YAAc4B,EAAOC,SAE7BC,iBAAkB,SAACrC,EAAOmC,GACxBnC,EAAMI,oBAAqB,EAC3BJ,EAAMU,iBAAmByB,EAAOC,SAElChB,2BAA4B,SAACpB,EAAOmC,GAClCnC,EAAMS,wBAA0B0B,EAAOC,SAEzCE,sBAAuB,SAACtC,GACtBA,EAAMU,sBAAmBJ,GAE3BiC,0BAA2B,SACzBvC,EACAmC,GAEAnC,EAAMW,gBAAkBwB,EAAOC,SAEjCI,wBAAyB,SAACxC,EAAOmC,GAC/BnC,EAAMU,iBAAmByB,EAAOC,SAElCK,wBAAyB,SAACzC,GACxBA,EAAMa,wBAAqBP,GAE7BoC,mBAAoB,SAAC1C,GACnB,OAAOJ,IAGX+C,cAAe,SAACC,GACdA,EAAQC,QAAQ/B,EAA0BgC,SAAS,SAAC9C,GAClDA,EAAMQ,wBAAyB,KAEjCoC,EAAQC,QAAQ/B,EAA0BiC,WAAW,SAAC/C,EAAOmC,GAC3DnC,EAAMQ,wBAAyB,EAC/BR,EAAMS,6BAA0BH,EAChCN,EAAMW,gBAAkBwB,EAAOC,QAC/BpC,EAAMU,sBAAmBJ,KAE3BsC,EAAQC,QAAQ/B,EAA0BkC,UAAU,SAAChD,EAAOmC,GAC1DnC,EAAMQ,wBAAyB,EAC/BR,EAAMS,6BAA0BH,EAChCN,EAAMU,iBAAmByB,EAAOc,MAC5B,IAAIC,MAAMf,EAAOc,MAAME,cACvB7C,KAENsC,EAAQC,QAAQf,EAA4BgB,SAAS,SAAC9C,GACpDA,EAAMY,0BAA2B,KAEnCgC,EAAQC,QAAQf,EAA4BiB,WAAW,SAAC/C,EAAOmC,GAC7DnC,EAAMW,gBAAkBwB,EAAOC,QAC/BpC,EAAMY,0BAA2B,EACjCZ,EAAMa,wBAAqBP,KAE7BsC,EAAQC,QAAQf,EAA4BkB,UAAU,SAAChD,EAAOmC,GAC5DnC,EAAMY,0BAA2B,EACjCZ,EAAMa,mBAAqBsB,EAAOc,MAC9B,IAAIC,MAAMf,EAAOc,MAAME,cACvB7C,Q,EAeN2B,EAAchC,QARhBiC,G,EADA9B,mB,EACA8B,oBAEAd,G,EADAiB,iB,EACAjB,4BACAkB,E,EAAAA,sBACAC,E,EAAAA,0BAEAE,G,EADAD,wB,EACAC,yBACAC,E,EAAAA,mBAGaT,IAAf,Q,SCpJO,SAASmB,EACdC,GAGA,IAAMC,EAAoB,IAAIC,YAC5B,yCAYF,OAVAD,EAAkBE,QAAU,WAEW,IAAjCF,EAAkBG,YACpBC,WAAWN,EAAqC,MAGpDE,EAAkBK,UAAY,SAACR,GAC7B,IAAMtB,EAAOJ,KAAKmC,MAAMT,EAAQtB,MAChCwB,EAAUxB,IAELyB,EAGF,SAASO,EACd9B,EACAsB,GAEA,IAAMS,EAAqB,IAAIP,YAAJ,iDACiBxB,IAW5C,OATA+B,EAAmBN,QAAU,WACW,IAAlCM,EAAmBL,YACrBC,WAAWG,EAA+B,MAG9CC,EAAmBH,UAAY,SAACR,GAC9B,IAAMtB,EAAOJ,KAAKmC,MAAMT,EAAQtB,MAChCwB,EAAUxB,IAELiC,EAGF,SAASC,EACdC,EACAX,EACAY,GAEA,IAAMH,EAAqB,IAAII,sBAAJ,yCAEzB,CACE3C,QAAS,CACP,8BAA+B,IAC/B4C,cAAeH,KAcrB,OAVAF,EAAmBN,QAAU,WAC3B,GAAsC,IAAlCM,EAAmBL,WAErB,OADAC,WAAWK,EAA6B,KACjCE,EAAQ,IAAIf,MAAM,6CAG7BY,EAAmBH,UAAY,SAACR,GAC9B,IAAMtB,EAAOJ,KAAKmC,MAAMT,EAAQtB,MAChCwB,EAAUxB,IAELiC,E,6CCjDF,SAASM,EAAT,GAOI,IANTzD,EAMQ,EANRA,gBACA0D,EAKQ,EALRA,sBACAC,EAIQ,EAJRA,cACAzD,EAGQ,EAHRA,mBACA0D,EAEQ,EAFRA,wBACAC,EACQ,EADRA,aAGEC,EAIE9D,EAJF8D,kBACAC,EAGE/D,EAHF+D,WACA1C,EAEErB,EAFFqB,OACA2C,EACEhE,EADFgE,oBAEIC,EAAcC,YAAyB7C,GAE7C,OACE,qCACE,cAAC,IAAD,CACE8C,UAAWjE,EACXkE,SAAUR,EACVS,OAAQ,KAHV,SAKE,6EAEF,eAAC,IAAD,CACEC,MAAOC,YAAmCR,EAAWS,gBACrDC,MAAO,CACLC,MAAO,IACPC,OAAO,aAAD,OAAeV,IAJzB,UAOE,qCACE,iEAAwBjE,EAAgBoB,iBAExC,yDAAqB0C,KACrB,4BAAIE,OAEM,eAAX3C,GACC,cAAC,IAAD,CACEuD,KAAK,UACLC,QAASnB,EACToB,QAASnB,EAHX,4BAQW,iBAAXtC,GACW,aAAXA,GACW,cAAXA,IACA,cAAC,IAAD,CAAQuD,KAAK,UAAUC,QAAShB,EAAhC,yB,aCpDH,SAASkB,EAAT,GAOI,IANTC,EAMQ,EANRA,oBACAC,EAKQ,EALRA,YACAnF,EAIQ,EAJRA,wBACAC,EAGQ,EAHRA,iBACAmF,EAEQ,EAFRA,sBACAtF,EACQ,EADRA,YAEA,OACE,gCACE,cAAC,IAAD,CACEuE,UAAWpE,EACXqE,SAAUc,EACVb,OAAQ,KAHV,SAKE,6EAEF,mCACGzE,EAAYuF,QACX,qCACE,gDAEA,cAAC,IAAD,CACEC,WAAW,WACXC,KAAK,QACLC,WAAY1F,EACZ2F,WAAY,SAACC,GAAD,OACV,cAAC,IAAKC,KAAN,UACE,cAAC,IAAD,CAAMnB,MAAOkB,EAAKhB,eAAlB,SACE,cAAC,IAAD,CACEI,KAAK,UACLC,QAAS,kBAAMG,EAAoBQ,EAAKnF,eACxCyE,QACEG,GACAnF,IAA4B0F,EAAKnF,aALrC,sCAiBU,IAAvBT,EAAYuF,QAAgB,mECtC5B,SAASO,IAAiB,IAAD,EAW1BnG,GAAe,SAACF,GAAD,OAAWA,EAAMsG,YATlClG,EAF4B,EAE5BA,mBACAC,EAH4B,EAG5BA,wBACAE,EAJ4B,EAI5BA,YACAC,EAL4B,EAK5BA,uBACAC,EAN4B,EAM5BA,wBACAC,EAP4B,EAO5BA,iBACAC,EAR4B,EAQ5BA,gBACAC,EAT4B,EAS5BA,yBACAC,EAV4B,EAU5BA,mBAGIM,EAAWoF,cAEjB,SAASC,EAAwBjG,GAC/BY,EAASe,EAAmB3B,IAe9B,SAASkG,EAAqB9F,GAC5BQ,EAASoB,EAA0B5B,IAmBrC,IAAI2C,EAAwC,KAE5CoD,qBAAU,WASR,OARK/F,EAMH2C,GAAqBA,EAAkBqD,QALvCrD,EAAoBF,EAClBoD,GAMG,WACLlD,GAAqBA,EAAkBqD,WAExC,CAAChG,IAEJ,IAAIiG,EAAwC,KAc5C,OAZAF,qBAAU,WACR,GAAI/F,EAKF,OAJAiG,EAAoB/C,EAClBlD,EAAgBoB,cAChB0E,GAEK,WACLG,GAAqBA,EAAkBD,WAG1C,CAAChG,IAGF,iCACIJ,GACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAKsG,KAAM,GAAIC,OAAQ,EAAvB,sDAKHvG,IAAgBI,GACf,cAAC+E,EAAD,CACEC,oBArER,SAAgC3E,GAC9BG,EAASL,EAA0BE,KAqE7B4E,YAAapF,EACbC,wBAAyBA,EACzBC,iBAAkBA,EAClBmF,sBArER,WACE1E,EAASmB,MAqEHyE,mBAAoB3G,EACpB4G,wBAAyB3G,EACzBE,YAAaA,IAGhBI,GACC,cAACyD,EAAD,CACEzD,gBAAiBA,EACjB0D,sBAAuB,kBAlEXtC,EAmECpB,EAAgBoB,mBAlEnCZ,EAASW,EAA4BC,IADvC,IAAoBA,GAqEZuC,cAAe1D,EACfC,mBAAoBA,EACpB0D,wBAnER,WACEpD,EAASsB,MAmEH+B,aAhER,WACErD,EAASuB,WCtDN,SAASuE,EAAT,GAQI,IAPTC,EAOQ,EAPRA,YACAC,EAMQ,EANRA,iBACAC,EAKQ,EALRA,eACAC,EAIQ,EAJRA,kBACAC,EAGQ,EAHRA,SACAC,EAEQ,EAFRA,gBACAC,EACQ,EADRA,QAEM5C,EAAcC,YAAyBqC,EAAYlF,QAEnDyF,EAAqBvC,YACzBgC,EAAYxC,WAAWS,gBAGnBuC,EACmB,iBAAvBR,EAAYlF,QACW,aAAvBkF,EAAYlF,QACW,cAAvBkF,EAAYlF,QACZuF,EAEII,EAAuC,eAAvBT,EAAYlF,QAA2BuF,EACvDK,EAAyC,YAAvBV,EAAYlF,QAAwBuF,EAE5D,OACE,cAAC,IAAD,CACEM,UAAW,CAAEC,QAASN,EAAU,YAASlH,GACzC8E,MAAO,CACLC,MAAO,IACPC,OAAO,aAAD,OAAeV,IAEvBK,MAAK,cAASiC,EAAYnF,cAArB,aACoB,eAAvBmF,EAAYlF,OAA0B,SAAW,UAEnD+F,MACE,sCACIP,GACA,4BACE,cAAC,IAAD,CACEQ,SAAUN,EACVlC,QAAS,kBAAM6B,EAAkBH,EAAYnF,gBAC7C0D,QAAS6B,EACTtB,KAAK,QAJP,6BAUHwB,GAAW,8CAAOC,QAvBzB,UA2BID,GACA,qCACE,cAAC,IAAD,CACEQ,SAAUL,EACVnC,QAAS,kBAAM2B,EAAiBD,EAAYnF,gBAC5C0D,QAAS6B,EAHX,0BAOA,cAAC,IAAD,CACEU,SAAUJ,EACVpC,QAAS,kBAAM4B,EAAeF,EAAYnF,gBAC1C0D,QAAS6B,EAHX,yBC5DH,SAASW,EAAT,GAWI,IAVTC,EAUQ,EAVRA,SACAC,EASQ,EATRA,aACAC,EAQQ,EARRA,kBACAjB,EAOQ,EAPRA,iBACAC,EAMQ,EANRA,eACAC,EAKQ,EALRA,kBACAC,EAIQ,EAJRA,SACAe,EAGQ,EAHRA,sBACAC,EAEQ,EAFRA,cACAC,EACQ,EADRA,mBAEMf,EAAiC,UAAvBU,EAASM,UAEzB,OACE,qCACE,cAAC,IAAD,CACE1D,UAAWwD,EACXvD,SAAUwD,EACVvD,OAAQ,KAHV,SAKE,2EAEF,eAAC,IAAD,WACGoD,GACC,cAAC,IAAD,CAAKvB,KAAM,GAAIC,OAAQ,EAAvB,6DAIAsB,GACA,cAAC,IAAD,CAAKvB,KAAM,GAAIC,OAAQ,EAAvB,SACGoB,IAAaC,EAAe,oCAA4B,oBAI7C7H,IAAjB6H,GACC,cAAC,IAAD,CAAKM,QAAQ,SAAb,SACE,cAAC,IAAD,CACE1C,WAAW,aACXE,WAAYkC,EACZO,OAAQ,CAAEC,UAAW,qDACrBzC,WAAY,SAACgB,EAAa0B,GAAd,OACV,cAAC,IAAKxC,KAAN,UACE,cAACa,EAAD,CACEC,YAAaA,EACbC,iBAAkBA,EAClBC,eAAgBA,EAChBC,kBAAmBA,EACnBC,SACEA,GACAe,IAA0BnB,EAAYnF,cAExCwF,gBAA2B,IAAVqB,GAAepB,EAChCA,QAASA,c,8BC7DrBqB,EAAS,CACbC,SAAU,CAAEjC,KAAM,GAClBkC,WAAY,CAAElC,KAAM,KAEhBmC,EAAa,CACjBD,WAAY,CAAEjC,OAAQ,EAAGD,KAAM,KAG1B,SAASoC,EAAT,GAAuE,IAAjDC,EAAgD,EAAhDA,SAAUC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,gBACjD,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOtE,UAAWqE,EAAYpE,SAAUqE,EAAiBpE,OAAQ,KAAjE,SACE,uDAEF,eAAC,IAAD,2BACM6D,GADN,IAEElJ,KAAK,QACL0J,cAAe,CAAEC,UAAU,GAC3BC,SAAUL,EAJZ,UAME,cAAC,IAAK9C,KAAN,CACEoD,MAAM,aACN7J,KAAK,WACL8J,MAAO,CAAC,CAAEC,UAAU,EAAMvG,QAAS,mCAHrC,SAKE,cAAC,IAAD,MAGF,cAAC,IAAKiD,KAAN,CACEoD,MAAM,mBACN7J,KAAK,WACL8J,MAAO,CAAC,CAAEC,UAAU,EAAMvG,QAAS,mCAHrC,SAKE,cAAC,IAAMwG,SAAP,MAEF,cAAC,IAAKvD,KAAN,2BAAe4C,GAAf,aACE,cAAC,IAAD,CAAQzD,KAAK,UAAUqE,SAAS,SAAhC,mCCpCH,SAASC,GAAT,GAAqD,IAA5B3B,EAA2B,EAA3BA,SAAU4B,EAAiB,EAAjBA,OACxC,OACE,mCACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAKjD,KAAM,EAAGC,OAAQ,GAAtB,UACE,cAAC,IAAD,CAAK2B,QAAQ,MAAb,SACE,cAAC,IAAD,CAAQjD,QAASsE,EAAjB,0BAEF,cAAC,IAAD,CAAKrB,QAAQ,MAAb,SACE,sDAEF,cAAC,IAAD,CAAKA,QAAQ,MAAMsB,MAAM,SAAzB,SACE,8BAC2B,OAAxB7B,EAASxD,WACNQ,YACEgD,EAASxD,WAAWS,gBAEtB+C,EAASM,UAAUwB,yBCJrC,IAAMpK,GAA2B,CAC/BqK,iBAAiB,EACjB/B,cAAU5H,EACV0D,gBAAY1D,EACZ4J,mBAAe5J,EACf6J,qBAAqB,EACrB9B,2BAAuB/H,EACvB8J,8BAA0B9J,EAC1B+J,wBAAoB/J,EACpB6H,kBAAc7H,EACd8H,uBAAmB9H,GAGRgK,GAAWvJ,YAItB,cAJsC,uCAIvB,WAAOwJ,EAAatJ,GAApB,mBAAAC,EAAA,6DACTsJ,EAAYC,YAAqBF,GADxB,SAEQlJ,MAAM,iCAAkC,CAC7DC,OAAQ,MACRC,QAAS,CACP4C,cAAeqG,EACf,8BAA+B,OANpB,cAET7I,EAFS,gBASIA,EAASC,OATb,UASTC,EATS,OAWO,MAApBF,EAASK,QACW,MAApBL,EAASK,QACW,MAApBL,EAASK,OAbI,6BAeNf,EAfM,UAe0BU,EAASC,OAfnC,kDAeG8I,gBAfH,kDAkBR7I,GAlBQ,4CAJuB,yDAyB3B8I,GAA0B5J,YAOrC,0BAPqD,uCAO1B,WAAO6J,EAAO3J,GAAd,iBAAAC,EAAA,6DAC3BD,EAASE,SAAS0J,GAAyBD,EAAM7I,gBADtB,SAEJV,MAAM,0CAAD,OACgBuJ,EAAM7I,eAChD,CACET,OAAQ,QACRC,QAAS,CACP4C,cAAc,GAAD,OAAKlD,EAAS6J,WAAWC,MAAM/G,YAC5C,8BAA+B,IAC/B,eAAgB,oBAElBxC,KAAMC,KAAKC,UAAU,CAAEM,OAAQ4I,EAAM5I,WAXd,UAeL,OAbhBL,EAFqB,QAehBK,QACW,MAApBL,EAASK,QACW,MAApBL,EAASK,OAjBgB,6BAmBlBf,EAnBkB,SAmBcU,EAASC,OAnBvB,iDAmBT8I,gBAnBS,0CAqBR/I,EAASC,OArBD,eAqBrBC,EArBqB,yBAsBpBA,GAtBoB,4CAP0B,yDAgC1CmJ,GAAatL,YAAY,CACpCC,KAAM,QACNC,gBACAE,SAAU,CACRmL,qBAAsB,SAACjL,EAAOmC,GAC5BnC,EAAMmI,aAAehG,EAAOC,QAC5BpC,EAAMoI,uBAAoB9H,GAE5B4K,0BAA2B,SAAClL,EAAOmC,GACjCnC,EAAMmI,kBAAe7H,EACrBN,EAAMoI,kBAAoBjG,EAAOC,SAEnCyI,yBAA0B,SAAC7K,EAAOmC,GAChCnC,EAAMqI,sBAAwBlG,EAAOC,SAEvC+I,gBAAiB,SAACnL,GAChBA,EAAMkK,mBAAgB5J,GAExB8K,mBAAoB,SAACpL,GACnBA,EAAMoK,8BAA2B9J,GAEnCwJ,OAAQ,SAAC9J,GACP,OAAOJ,KAGX+C,cAAe,SAACC,GACdA,EAAQC,QAAQyH,GAASxH,SAAS,SAAC9C,GACjCA,EAAMiK,iBAAkB,KAE1BrH,EAAQC,QAAQyH,GAASvH,WAAW,SAAC/C,EAAOmC,GAC1CnC,EAAMiK,iBAAkB,EACxBjK,EAAMkI,SAAW/F,EAAOC,QACxBpC,EAAMkK,mBAAgB5J,EACtBN,EAAMgE,WAAayG,YAAqB,CACtCY,SAAUlJ,EAAOmJ,KAAKC,IAAIF,SAC1BG,SAAUrJ,EAAOmJ,KAAKC,IAAIC,cAG9B5I,EAAQC,QAAQyH,GAAStH,UAAU,SAAChD,EAAOmC,GACzCnC,EAAMiK,iBAAkB,EACxBjK,EAAMkI,cAAW5H,EACjBN,EAAMkK,cAAgB/H,EAAOc,MACzB,IAAIC,MAAMf,EAAOc,MAAME,cACvB7C,KAENsC,EAAQC,QAAQ8H,GAAwB7H,SAAS,SAAC9C,GAChDA,EAAMmK,qBAAsB,KAE9BvH,EAAQC,QAAQ8H,GAAwB5H,WAAW,SAAC/C,EAAOmC,GAAY,IAAD,EACpEnC,EAAMmK,qBAAsB,EAC5BnK,EAAMqI,2BAAwB/H,EAC9BN,EAAMmI,aAAN,UAAqBnI,EAAMmI,oBAA3B,aAAqB,EAAoBsD,KAAI,SAACvK,GAAD,OAC3CA,EAAEa,gBAAkBI,EAAOC,QAAQL,cAAgBI,EAAOC,QAAUlB,KAEtElB,EAAMoK,8BAA2B9J,KAEnCsC,EAAQC,QAAQ8H,GAAwB3H,UAAU,SAAChD,EAAOmC,GACxDnC,EAAMqI,2BAAwB/H,EAC9BN,EAAMmK,qBAAsB,EAC5BnK,EAAMoK,yBAA2BjI,EAAOc,MACpC,IAAIC,MAAMf,EAAOc,MAAME,cACvB7C,Q,GAYN0K,GAAW/K,QANbkL,G,GAAAA,gBACAF,G,GAAAA,qBACAC,G,GAAAA,0BACAL,G,GAAAA,yBACAO,G,GAAAA,mBACAtB,G,GAAAA,OAMakB,MAAf,QClJO,SAASU,GAAT,GAAgC,qBAUjCxL,GAAe,SAACF,GAAD,OAAWA,EAAM+K,SARlC/G,EAFkC,EAElCA,WACAkE,EAHkC,EAGlCA,SACAgC,EAJkC,EAIlCA,cACAC,EALkC,EAKlCA,oBACA9B,EANkC,EAMlCA,sBACA+B,EAPkC,EAOlCA,yBACAjC,EARkC,EAQlCA,aACAC,EATkC,EASlCA,kBAGIjH,EAAWoF,cAUjB,IAAMoF,EAAoB,SAAC3J,GAAD,OAA+B,SACvDD,GAEAZ,EAASwJ,GAAwB,CAAE5I,gBAAeC,cAOpD,SAAS4J,EAAyBzD,GAChChH,EAAS8J,GAAqB9C,IAGhC,SAAS0D,EAAuB5I,GAC9B9B,EAAS+J,GAA0BjI,IAOrC,IAAI6I,EAA6B,KAcjC,OAbApF,qBAAU,WAQR,OAPIwB,GAAYlE,IACd8H,EAAS/H,EACPC,EACA4H,EACAC,IAGG,WACLC,GAAUA,EAAOnF,WAElB,CAACuB,IAGF,sCACIlE,GACA,cAACiF,EAAD,CACEC,SAhDR,SAAe6C,GACb5K,EAASmJ,GAASyB,KAgDZ5C,WAAYe,EACZd,gBA9CR,WACEjI,EAASgK,WAgDJnH,GACD,eAAC,IAAD,CAAK6C,KAAM,GAAX,UACE,cAAC,IAAD,CAAKA,KAAM,GAAX,SACGqB,GAAY,cAAC2B,GAAD,CAAe3B,SAAUA,EAAU4B,OA9B1D,WACE3I,EAAS2I,WA+BF5B,GACC,cAACD,EAAD,CACEC,SAAUA,EACVC,aAAcA,EACdC,kBAAmBA,EACnBjB,iBAAkBwE,EAAkB,WACpCvE,eAAgBuE,EAAkB,YAClCtE,kBAAmBsE,EAAkB,aACrCrE,SAAU6C,EACV9B,sBAAuBA,EACvBC,cAAe8B,EACf7B,mBAvDZ,WACEpH,EAASiK,e,cC5CN,SAASY,GAAT,GAA+B,qBAKhC9L,GAAe,SAACF,GAAD,OAAWA,KAHfH,EAFoB,EAEjCoM,UAAapM,aACDc,EAHqB,EAGjC2F,SAAY3F,gBACHuH,EAJwB,EAIjC6C,MAAS7C,SAGL/G,EAAWoF,cAIjB,OACE,eAAC,IAAD,WACE,cAAC,UAAD,IACA,eAAC,WAAD,CAASnB,MAAO,CAAE8G,UAAW,QAASC,WAAY,QAAlD,UACE,cAAC,IAAD,CAAKtF,KAAM,GAAIC,OAAQ,GAAvB,UACInG,IAAoBuH,GACpB,cAAC,IAAD,CAAQ1C,QATlB,WACErE,EAASpB,MAQD,SACGF,EAAe,eAAiB,uBAKvC,eAAC,IAAD,CAAK4I,QAAQ,SAASsB,MAAM,SAA5B,WACIlK,GAAgB,cAAC6L,GAAD,IACjB7L,GAAgB,cAACwG,EAAD,UAGrB,cAAC,UAAD,yC,cCjCO+F,GAAQC,YAAe,CAClCC,QAAS,CACPL,UAAWM,EACXjG,SAAUkG,EACVzB,MAAO0B,IAETC,WAAY,SAACC,GAAD,OACVA,EAAqB,CACnBC,mBAAmB,OCSVC,OAhBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,iBAAD,CACEC,kBAAmB,kBACjB,2FAFJ,SAKE,cAAC,IAAD,CAAUX,MAAOA,GAAjB,SACE,cAACJ,GAAD,WCDKgB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAG1Bb,M,iCCXA,YAAO,SAASvC,EAAqBqD,GAA6B,IAE1DC,EADyBD,EAAvBzC,SAC4B,IADLyC,EAAbtC,SAElB,MAAO,SAAWwC,EAAOC,KAAKF,GAAkBG,SAAS,UAEpD,SAASrJ,EAAyB7C,GACvC,OAAQA,GACN,IAAK,aACH,MAAO,QACT,IAAK,eACH,MAAO,OACT,IAAK,YACH,MAAO,MACT,IAAK,WACH,MAAO,OACT,IAAK,UACH,MAAO,SAIN,SAASkD,EAAmCK,GACjD,OAAQA,GACN,IAAK,aACH,MAAO,sBACT,IAAK,eACH,MAAO,sBACT,IAAK,eACH,MAAO,sBACT,QACE,MAAO,IA7Bb,wG","file":"static/js/main.63bbfa87.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\n\r\nexport interface MainPanelState {\r\n  customerMode: boolean;\r\n}\r\n\r\nconst initialState: MainPanelState = {\r\n  customerMode: true,\r\n};\r\n\r\nexport const mainPanelSlice = createSlice({\r\n  name: \"mainPanel\",\r\n  initialState,\r\n  reducers: {\r\n    toggleCustomerMode: (state) => {\r\n      state.customerMode = !state.customerMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleCustomerMode } = mainPanelSlice.actions;\r\n\r\nexport const selectCustomerMode = (state: RootState) =>\r\n  state.mainPanel.customerMode;\r\n\r\nexport default mainPanelSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppointmentInfo, SpecialistInfo } from \"./dataTypes\";\r\nimport type { AppDispatch } from \"./store\";\r\n\r\nexport interface CustomerState {\r\n  gettingSpecialists: boolean;\r\n  gettingSpecialistsError: Error | undefined;\r\n  specialists: SpecialistInfo[] | undefined;\r\n  registeringAppointment: boolean;\r\n  registeringSpecialistId: number | undefined;\r\n  registeringError: Error | undefined;\r\n  appointmentInfo: AppointmentInfo | undefined;\r\n  unregisteringAppointment: boolean;\r\n  unregisteringError: Error | undefined;\r\n}\r\n\r\nconst initialState: CustomerState = {\r\n  gettingSpecialists: false,\r\n  gettingSpecialistsError: undefined,\r\n  specialists: undefined,\r\n  registeringAppointment: false,\r\n  registeringSpecialistId: undefined,\r\n  registeringError: undefined,\r\n  appointmentInfo: undefined,\r\n  unregisteringAppointment: false,\r\n  unregisteringError: undefined,\r\n};\r\n\r\nexport const registerWithSpecialistApi = createAsyncThunk<\r\n  AppointmentInfo,\r\n  number,\r\n  {\r\n    dispatch: AppDispatch;\r\n    state: CustomerState;\r\n  }\r\n>(\"customer/register\", async (specialistId: number, thunkApi: any) => {\r\n  thunkApi.dispatch(setRegisteringSpecialistId(specialistId));\r\n  const response = await fetch(`http://localhost:8080/api/appointments`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ specialistId: specialistId }),\r\n  });\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n});\r\n\r\nexport const unregisterWithSpecialistApi = createAsyncThunk<\r\n  AppointmentInfo,\r\n  number\r\n>(\"customer/unregisterAppointment\", async (appointmentId: number) => {\r\n  const response = await fetch(\r\n    `http://localhost:8080/api/appointments/${appointmentId}`,\r\n    {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: \"UNREGISTERED\" }),\r\n    }\r\n  );\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n});\r\n\r\nexport const customerSlice = createSlice({\r\n  name: \"customer\",\r\n  initialState,\r\n  reducers: {\r\n    gettingSpecialists: (state) => {\r\n      state.gettingSpecialists = true;\r\n    },\r\n    specialistsSuccess: (state, action: PayloadAction<SpecialistInfo[]>) => {\r\n      state.gettingSpecialists = false;\r\n      state.specialists = action.payload;\r\n    },\r\n    specialistsError: (state, action: PayloadAction<Error>) => {\r\n      state.gettingSpecialists = false;\r\n      state.registeringError = action.payload;\r\n    },\r\n    setRegisteringSpecialistId: (state, action: PayloadAction<number>) => {\r\n      state.registeringSpecialistId = action.payload;\r\n    },\r\n    resetRegisteringError: (state) => {\r\n      state.registeringError = undefined;\r\n    },\r\n    gettingAppointmentSuccess: (\r\n      state,\r\n      action: PayloadAction<AppointmentInfo>\r\n    ) => {\r\n      state.appointmentInfo = action.payload;\r\n    },\r\n    gettingAppointmentError: (state, action: PayloadAction<Error>) => {\r\n      state.registeringError = action.payload;\r\n    },\r\n    resetUnregisteringError: (state) => {\r\n      state.unregisteringError = undefined;\r\n    },\r\n    resetCustomerState: (state) => {\r\n      return initialState;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(registerWithSpecialistApi.pending, (state) => {\r\n      state.registeringAppointment = true;\r\n    });\r\n    builder.addCase(registerWithSpecialistApi.fulfilled, (state, action) => {\r\n      state.registeringAppointment = false;\r\n      state.registeringSpecialistId = undefined;\r\n      state.appointmentInfo = action.payload;\r\n      state.registeringError = undefined;\r\n    });\r\n    builder.addCase(registerWithSpecialistApi.rejected, (state, action) => {\r\n      state.registeringAppointment = false;\r\n      state.registeringSpecialistId = undefined;\r\n      state.registeringError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n    builder.addCase(unregisterWithSpecialistApi.pending, (state) => {\r\n      state.unregisteringAppointment = true;\r\n    });\r\n    builder.addCase(unregisterWithSpecialistApi.fulfilled, (state, action) => {\r\n      state.appointmentInfo = action.payload;\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringError = undefined;\r\n    });\r\n    builder.addCase(unregisterWithSpecialistApi.rejected, (state, action) => {\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  gettingSpecialists,\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  setRegisteringSpecialistId,\r\n  resetRegisteringError,\r\n  gettingAppointmentSuccess,\r\n  gettingAppointmentError,\r\n  resetUnregisteringError,\r\n  resetCustomerState,\r\n} = customerSlice.actions;\r\n\r\nexport default customerSlice.reducer;\r\n","import { AppointmentInfo, SpecialistInfo } from \"../state/dataTypes\";\r\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\r\n\r\nexport function initializeCustomerSpecialistsSource(\r\n  onSuccess: (specialists: SpecialistInfo[]) => void\r\n  // onError: (error: Error) => void\r\n): EventSource {\r\n  const specialistsSource = new EventSource(\r\n    \"http://127.0.0.1:8080/api/specialists\"\r\n  );\r\n  specialistsSource.onerror = () => {\r\n    // onError(new Error(\"Nepavyko gauti specialistų duomenų\"));\r\n    if (specialistsSource.readyState === 2) {\r\n      setTimeout(initializeCustomerSpecialistsSource, 300);\r\n    }\r\n  };\r\n  specialistsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    onSuccess(data);\r\n  };\r\n  return specialistsSource;\r\n}\r\n\r\nexport function initCustomerAppointmentSource(\r\n  appointmentId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSource(\r\n    `http://127.0.0.1:8080/api/appointments/${appointmentId}`\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initCustomerAppointmentSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function initStaffAppointmentsSource(\r\n  authHeader: string,\r\n  onSuccess: (appointmentInfo: AppointmentInfo[]) => void,\r\n  onError: (error: Error) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSourcePolyfill(\r\n    `http://127.0.0.1:8080/api/appointments`,\r\n    {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: authHeader,\r\n      },\r\n    }\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initStaffAppointmentsSource, 300);\r\n      return onError(new Error(\"Nepavyko gauti vizitų duomenų\"));\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message: any) => {\r\n    const data = JSON.parse(message.data);\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n","import { Button, Card } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport {\r\n  colorByAppointmentStatus,\r\n  specialistTypeInfoBySpecialistType,\r\n} from \"../../functions/utilFunctions\";\r\nimport { AppointmentInfo } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  appointmentInfo: AppointmentInfo;\r\n  unregisterAppointment: () => void;\r\n  unregistering: boolean;\r\n  unregisteringError: Error | undefined;\r\n  closeUnregisteringError: () => void;\r\n  returnToMenu: () => void;\r\n}\r\n\r\nexport function AppointmentInformation({\r\n  appointmentInfo,\r\n  unregisterAppointment,\r\n  unregistering,\r\n  unregisteringError,\r\n  closeUnregisteringError,\r\n  returnToMenu,\r\n}: Props) {\r\n  const {\r\n    positionOnTheList,\r\n    specialist,\r\n    status,\r\n    approximateTimeLeft,\r\n  } = appointmentInfo;\r\n  const borderColor = colorByAppointmentStatus(status);\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={!!unregisteringError}\r\n        onCancel={closeUnregisteringError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, pabandykite vėliau</p>\r\n      </Modal>\r\n      <Card\r\n        title={specialistTypeInfoBySpecialistType(specialist.specialistType)}\r\n        style={{\r\n          width: 300,\r\n          border: `5px solid ${borderColor}`,\r\n        }}\r\n      >\r\n        <>\r\n          <p>{`Jūsų numeriukas: ${appointmentInfo.appointmentId}`}</p>\r\n\r\n          <p>{`Vieta eilėje: ${positionOnTheList}`}</p>\r\n          <p>{approximateTimeLeft}</p>\r\n        </>\r\n        {status === \"REGISTERED\" && (\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={unregisterAppointment}\r\n            loading={unregistering}\r\n          >\r\n            Atšaukti\r\n          </Button>\r\n        )}\r\n        {(status === \"UNREGISTERED\" ||\r\n          status === \"FINISHED\" ||\r\n          status === \"CANCELLED\") && (\r\n          <Button type=\"primary\" onClick={returnToMenu}>\r\n            Atgal\r\n          </Button>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { Button, List, Card } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { SpecialistInfo } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  registerAppointment: (specialistId: number) => void;\r\n  registering: boolean;\r\n  registeringSpecialistId: number | undefined;\r\n  registeringError: Error | undefined;\r\n  closeRegisteringError: () => void;\r\n  loadingSpecialists: boolean;\r\n  loadingSpecialistsError: Error | undefined;\r\n  specialists: SpecialistInfo[];\r\n}\r\n\r\nexport function CustomerSpecialists({\r\n  registerAppointment,\r\n  registering,\r\n  registeringSpecialistId,\r\n  registeringError,\r\n  closeRegisteringError,\r\n  specialists,\r\n}: Props) {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        visible={!!registeringError}\r\n        onCancel={closeRegisteringError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, pabandykite vėliau</p>\r\n      </Modal>\r\n      <>\r\n        {specialists.length && (\r\n          <>\r\n            <div>Specialistai:</div>\r\n\r\n            <List\r\n              itemLayout=\"vertical\"\r\n              size=\"large\"\r\n              dataSource={specialists}\r\n              renderItem={(spec) => (\r\n                <List.Item>\r\n                  <Card title={spec.specialistType}>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => registerAppointment(spec.specialistId)}\r\n                      loading={\r\n                        registering &&\r\n                        registeringSpecialistId === spec.specialistId\r\n                      }\r\n                    >\r\n                      Registruotis\r\n                    </Button>\r\n                  </Card>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n      {specialists.length === 0 && \"Šiuo metu nėra dirbančių specialistų\"}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  resetRegisteringError,\r\n  resetCustomerState,\r\n  registerWithSpecialistApi,\r\n  unregisterWithSpecialistApi,\r\n  gettingAppointmentSuccess,\r\n  gettingAppointmentError,\r\n  resetUnregisteringError,\r\n} from \"../state/sliceCustomer\";\r\nimport {\r\n  initCustomerAppointmentSource,\r\n  initializeCustomerSpecialistsSource,\r\n} from \"../functions/apiSourceFunctions\";\r\nimport { AppointmentInfo, SpecialistInfo } from \"../state/dataTypes\";\r\nimport { AppointmentInformation } from \"../components/customer/AppointmentInformation\";\r\nimport { CustomerSpecialists } from \"../components/customer/SpecialistsList\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nexport function CustomerPanel() {\r\n  const {\r\n    gettingSpecialists,\r\n    gettingSpecialistsError,\r\n    specialists,\r\n    registeringAppointment,\r\n    registeringSpecialistId,\r\n    registeringError,\r\n    appointmentInfo,\r\n    unregisteringAppointment,\r\n    unregisteringError,\r\n  } = useAppSelector((state) => state.customer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function watchSpecialistsSuccess(specialists: SpecialistInfo[]) {\r\n    dispatch(specialistsSuccess(specialists));\r\n  }\r\n\r\n  function watchSpecialistsError(error: Error) {\r\n    dispatch(specialistsError(error));\r\n  }\r\n\r\n  function registerWithSpecialist(specialistId: number) {\r\n    dispatch(registerWithSpecialistApi(specialistId));\r\n  }\r\n\r\n  function closeRegisteringError() {\r\n    dispatch(resetRegisteringError());\r\n  }\r\n\r\n  function watchAppointmentInfo(appointmentInfo: AppointmentInfo) {\r\n    dispatch(gettingAppointmentSuccess(appointmentInfo));\r\n  }\r\n\r\n  function watchAppointmentInfoError(error: Error) {\r\n    dispatch(gettingAppointmentError(error));\r\n  }\r\n\r\n  function unregister(appointmentId: number) {\r\n    dispatch(unregisterWithSpecialistApi(appointmentId));\r\n  }\r\n\r\n  function closeUnregisteringError() {\r\n    dispatch(resetUnregisteringError());\r\n  }\r\n\r\n  function returnToCustomerMenu() {\r\n    dispatch(resetCustomerState());\r\n  }\r\n\r\n  let specialistsSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (!appointmentInfo) {\r\n      specialistsSource = initializeCustomerSpecialistsSource(\r\n        watchSpecialistsSuccess\r\n        // watchSpecialistsError\r\n      );\r\n    } else {\r\n      specialistsSource && specialistsSource.close();\r\n    }\r\n    return () => {\r\n      specialistsSource && specialistsSource.close();\r\n    };\r\n  }, [appointmentInfo]);\r\n\r\n  let appointmentSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (appointmentInfo) {\r\n      appointmentSource = initCustomerAppointmentSource(\r\n        appointmentInfo.appointmentId,\r\n        watchAppointmentInfo\r\n      );\r\n      return () => {\r\n        appointmentSource && appointmentSource.close();\r\n      };\r\n    }\r\n  }, [appointmentInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {!specialists && (\r\n        <Row>\r\n          <Col span={12} offset={6}>\r\n            Laukiama specialistų duomenų\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {specialists && !appointmentInfo && (\r\n        <CustomerSpecialists\r\n          registerAppointment={registerWithSpecialist}\r\n          registering={registeringAppointment}\r\n          registeringSpecialistId={registeringSpecialistId}\r\n          registeringError={registeringError}\r\n          closeRegisteringError={closeRegisteringError}\r\n          loadingSpecialists={gettingSpecialists}\r\n          loadingSpecialistsError={gettingSpecialistsError}\r\n          specialists={specialists}\r\n        />\r\n      )}\r\n      {appointmentInfo && (\r\n        <AppointmentInformation\r\n          appointmentInfo={appointmentInfo}\r\n          unregisterAppointment={() =>\r\n            unregister(appointmentInfo.appointmentId)\r\n          }\r\n          unregistering={unregisteringAppointment}\r\n          unregisteringError={unregisteringError}\r\n          closeUnregisteringError={closeUnregisteringError}\r\n          returnToMenu={returnToCustomerMenu}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Card, Col, List, Row } from \"antd\";\r\nimport {\r\n  colorByAppointmentStatus,\r\n  specialistTypeInfoBySpecialistType,\r\n} from \"../../functions/utilFunctions\";\r\nimport { AppointmentInfo, UserInfo } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  appointment: AppointmentInfo;\r\n  startAppointment: (appointmentId: number) => void;\r\n  endAppointment: (appointmentId: number) => void;\r\n  cancelAppointment: (appointmentId: number) => void;\r\n  updating: boolean;\r\n  actionsDisabled: boolean;\r\n  isAdmin: boolean;\r\n}\r\n\r\nexport function AppointmentsListCard({\r\n  appointment,\r\n  startAppointment,\r\n  endAppointment,\r\n  cancelAppointment,\r\n  updating,\r\n  actionsDisabled,\r\n  isAdmin,\r\n}: Props) {\r\n  const borderColor = colorByAppointmentStatus(appointment.status);\r\n\r\n  const specialistTypeInfo = specialistTypeInfoBySpecialistType(\r\n    appointment.specialist.specialistType\r\n  );\r\n\r\n  const cancelDisabled =\r\n    appointment.status === \"UNREGISTERED\" ||\r\n    appointment.status === \"FINISHED\" ||\r\n    appointment.status === \"CANCELLED\" ||\r\n    actionsDisabled;\r\n\r\n  const startDisabled = appointment.status !== \"REGISTERED\" || actionsDisabled;\r\n  const fisnishDisabled = appointment.status !== \"STARTED\" || actionsDisabled;\r\n\r\n  return (\r\n    <Card\r\n      bodyStyle={{ display: isAdmin ? \"none\" : undefined }}\r\n      style={{\r\n        width: 300,\r\n        border: `5px solid ${borderColor}`,\r\n      }}\r\n      title={`Nr. ${appointment.appointmentId}: ${\r\n        appointment.status === \"REGISTERED\" ? \"laukia\" : \"vyksta\"\r\n      }`}\r\n      extra={\r\n        <>\r\n          {!isAdmin && (\r\n            <p>\r\n              <Button\r\n                disabled={cancelDisabled}\r\n                onClick={() => cancelAppointment(appointment.appointmentId)}\r\n                loading={updating}\r\n                size=\"small\"\r\n              >\r\n                atšaukti\r\n              </Button>\r\n            </p>\r\n          )}\r\n          {isAdmin && <>{` ${specialistTypeInfo}`}</>}\r\n        </>\r\n      }\r\n    >\r\n      {!isAdmin && (\r\n        <>\r\n          <Button\r\n            disabled={startDisabled}\r\n            onClick={() => startAppointment(appointment.appointmentId)}\r\n            loading={updating}\r\n          >\r\n            pradėti\r\n          </Button>\r\n          <Button\r\n            disabled={fisnishDisabled}\r\n            onClick={() => endAppointment(appointment.appointmentId)}\r\n            loading={updating}\r\n          >\r\n            baigti\r\n          </Button>\r\n        </>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n","import { Button, Card, Col, List, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { AppointmentInfo, UserInfo } from \"../../state/dataTypes\";\r\nimport { AppointmentsListCard } from \"./AppointmentsListCard\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  appointments: AppointmentInfo[] | undefined;\r\n  appointmentsError?: Error;\r\n  startAppointment: (appointmentId: number) => void;\r\n  endAppointment: (appointmentId: number) => void;\r\n  cancelAppointment: (appointmentId: number) => void;\r\n  updating: boolean;\r\n  updatingAppointmentId: number | undefined;\r\n  updatingError: Error | undefined;\r\n  closeUpdatingError: () => void;\r\n}\r\n\r\nexport function StaffAppointments({\r\n  userInfo,\r\n  appointments,\r\n  appointmentsError,\r\n  startAppointment,\r\n  endAppointment,\r\n  cancelAppointment,\r\n  updating,\r\n  updatingAppointmentId,\r\n  updatingError,\r\n  closeUpdatingError,\r\n}: Props) {\r\n  const isAdmin = userInfo.authority === \"ADMIN\";\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={!!updatingError}\r\n        onCancel={closeUpdatingError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, bandykite vėliau</p>\r\n      </Modal>\r\n      <Row>\r\n        {appointmentsError && (\r\n          <Col span={12} offset={6}>\r\n            Klaida gaunant vizitų duomenis, palaukite\r\n          </Col>\r\n        )}\r\n        {!appointmentsError && (\r\n          <Col span={12} offset={6}>\r\n            {userInfo && !appointments ? \"Laukiama vizitų duomenų\" : \"Vizitai\"}\r\n          </Col>\r\n        )}\r\n      </Row>\r\n      {appointments !== undefined && (\r\n        <Row justify=\"center\">\r\n          <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={appointments}\r\n            locale={{ emptyText: \"Šiuo metu prisiregistravusių nėra.\" }}\r\n            renderItem={(appointment, index) => (\r\n              <List.Item>\r\n                <AppointmentsListCard\r\n                  appointment={appointment}\r\n                  startAppointment={startAppointment}\r\n                  endAppointment={endAppointment}\r\n                  cancelAppointment={cancelAppointment}\r\n                  updating={\r\n                    updating &&\r\n                    updatingAppointmentId === appointment.appointmentId\r\n                  }\r\n                  actionsDisabled={index !== 0 || isAdmin}\r\n                  isAdmin={isAdmin}\r\n                />\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Col, Form, Input, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { LoginDetails } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  onSubmit: (values: LoginDetails) => void;\r\n  loginError: Error | undefined;\r\n  closeLoginError: () => void;\r\n}\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport function StaffLogIn({ onSubmit, loginError, closeLoginError }: Props) {\r\n  return (\r\n    <Row>\r\n      <Modal visible={!!loginError} onCancel={closeLoginError} footer={null}>\r\n        <p>Prisijungti nepavyko</p>\r\n      </Modal>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n      >\r\n        <Form.Item\r\n          label=\"Vartotojas\"\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Vartotojo vardas būtinas!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Slaptažodis\"\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Slaptažodis būtinas!\" }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Prisijungti\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Row>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport { UserInfo } from \"../../state/dataTypes\";\r\nimport { Col, Row } from \"antd\";\r\nimport { specialistTypeInfoBySpecialistType } from \"../../functions/utilFunctions\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  logout: () => void;\r\n}\r\n\r\nexport function StaffUserInfo({ userInfo, logout }: Props) {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={6} offset={16}>\r\n          <Row justify=\"end\">\r\n            <Button onClick={logout}>Atsijungti</Button>\r\n          </Row>\r\n          <Row justify=\"end\">\r\n            <div>{`Prisijunges kaip:`}</div>\r\n          </Row>\r\n          <Row justify=\"end\" align=\"middle\">\r\n            <div>\r\n              {userInfo.specialist !== null\r\n                ? specialistTypeInfoBySpecialistType(\r\n                    userInfo.specialist.specialistType\r\n                  )\r\n                : userInfo.authority.toLowerCase()}\r\n            </div>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { createBasicAuthToken } from \"../functions/utilFunctions\";\r\nimport {\r\n  AppointmentInfo,\r\n  AppointmentStatus,\r\n  LoginDetails,\r\n  UserInfo,\r\n} from \"./dataTypes\";\r\nimport type { AppDispatch, RootState } from \"./store\";\r\n\r\nexport interface StaffState {\r\n  gettingUserInfo: boolean;\r\n  userInfo: UserInfo | undefined;\r\n  authHeader: string | undefined;\r\n  userInfoError: Error | undefined;\r\n  updatingAppointment: boolean;\r\n  updatingAppointmentId: number | undefined;\r\n  updatingAppointmentError: Error | undefined;\r\n  updatedAppointment: AppointmentInfo | undefined;\r\n  appointments: AppointmentInfo[] | undefined;\r\n  appointmentsError: Error | undefined;\r\n}\r\n\r\nconst initialState: StaffState = {\r\n  gettingUserInfo: false,\r\n  userInfo: undefined,\r\n  authHeader: undefined,\r\n  userInfoError: undefined,\r\n  updatingAppointment: false,\r\n  updatingAppointmentId: undefined,\r\n  updatingAppointmentError: undefined,\r\n  updatedAppointment: undefined,\r\n  appointments: undefined,\r\n  appointmentsError: undefined,\r\n};\r\n\r\nexport const loginApi = createAsyncThunk<\r\n  UserInfo,\r\n  LoginDetails,\r\n  { rejectValue: Error }\r\n>(\"staff/login\", async (loginDetais, thunkApi) => {\r\n  const authToken = createBasicAuthToken(loginDetais);\r\n  const response = await fetch(`http://localhost:8080/api/user`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      authorization: authToken,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n  if (\r\n    response.status === 400 ||\r\n    response.status === 401 ||\r\n    response.status === 500\r\n  ) {\r\n    return thunkApi.rejectWithValue((await response.json()) as Error);\r\n  }\r\n\r\n  return data as UserInfo;\r\n});\r\n\r\nexport const setAppointmentStatusApi = createAsyncThunk<\r\n  AppointmentInfo,\r\n  { appointmentId: number; status: AppointmentStatus },\r\n  {\r\n    dispatch: AppDispatch;\r\n    state: RootState;\r\n  }\r\n>(\"staff/updateAppointment\", async (input, thunkApi) => {\r\n  thunkApi.dispatch(setUpdatingAppointmentId(input.appointmentId));\r\n  const response = await fetch(\r\n    `http://localhost:8080/api/appointments/${input.appointmentId}`,\r\n    {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: `${thunkApi.getState().staff.authHeader}`,\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: input.status }),\r\n    }\r\n  );\r\n  if (\r\n    response.status === 400 ||\r\n    response.status === 401 ||\r\n    response.status === 500\r\n  ) {\r\n    return thunkApi.rejectWithValue((await response.json()) as Error);\r\n  }\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n});\r\n\r\nexport const staffSlice = createSlice({\r\n  name: \"staff\",\r\n  initialState,\r\n  reducers: {\r\n    setStaffAppointments: (state, action: PayloadAction<AppointmentInfo[]>) => {\r\n      state.appointments = action.payload;\r\n      state.appointmentsError = undefined;\r\n    },\r\n    setStaffAppointmentsError: (state, action: PayloadAction<Error>) => {\r\n      state.appointments = undefined;\r\n      state.appointmentsError = action.payload;\r\n    },\r\n    setUpdatingAppointmentId: (state, action: PayloadAction<number>) => {\r\n      state.updatingAppointmentId = action.payload;\r\n    },\r\n    resetLoginError: (state) => {\r\n      state.userInfoError = undefined;\r\n    },\r\n    resetUpdatingError: (state) => {\r\n      state.updatingAppointmentError = undefined;\r\n    },\r\n    logout: (state) => {\r\n      return initialState;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loginApi.pending, (state) => {\r\n      state.gettingUserInfo = true;\r\n    });\r\n    builder.addCase(loginApi.fulfilled, (state, action) => {\r\n      state.gettingUserInfo = false;\r\n      state.userInfo = action.payload;\r\n      state.userInfoError = undefined;\r\n      state.authHeader = createBasicAuthToken({\r\n        username: action.meta.arg.username,\r\n        password: action.meta.arg.password,\r\n      });\r\n    });\r\n    builder.addCase(loginApi.rejected, (state, action) => {\r\n      state.gettingUserInfo = false;\r\n      state.userInfo = undefined;\r\n      state.userInfoError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n    builder.addCase(setAppointmentStatusApi.pending, (state) => {\r\n      state.updatingAppointment = true;\r\n    });\r\n    builder.addCase(setAppointmentStatusApi.fulfilled, (state, action) => {\r\n      state.updatingAppointment = false;\r\n      state.updatingAppointmentId = undefined;\r\n      state.appointments = state.appointments?.map((a) =>\r\n        a.appointmentId === action.payload.appointmentId ? action.payload : a\r\n      );\r\n      state.updatingAppointmentError = undefined;\r\n    });\r\n    builder.addCase(setAppointmentStatusApi.rejected, (state, action) => {\r\n      state.updatingAppointmentId = undefined;\r\n      state.updatingAppointment = false;\r\n      state.updatingAppointmentError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  resetLoginError,\r\n  setStaffAppointments,\r\n  setStaffAppointmentsError,\r\n  setUpdatingAppointmentId,\r\n  resetUpdatingError,\r\n  logout,\r\n} = staffSlice.actions;\r\n\r\nexport const selectAuthenticationHeader = (state: RootState) =>\r\n  state.staff.authHeader;\r\n\r\nexport default staffSlice.reducer;\r\n","import { Col } from \"antd\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StaffAppointments } from \"../components/staff/AppointmentsList\";\r\nimport { StaffLogIn } from \"../components/staff/LogInForm\";\r\nimport { StaffUserInfo } from \"../components/staff/UserInfo\";\r\nimport { initStaffAppointmentsSource } from \"../functions/apiSourceFunctions\";\r\nimport {\r\n  AppointmentInfo,\r\n  AppointmentStatus,\r\n  LoginDetails,\r\n} from \"../state/dataTypes\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  setStaffAppointments,\r\n  logout,\r\n  setAppointmentStatusApi,\r\n  loginApi,\r\n  resetLoginError,\r\n  resetUpdatingError,\r\n  setStaffAppointmentsError,\r\n} from \"../state/sliceStaff\";\r\n\r\ninterface Props {}\r\n\r\nexport function StaffPanel({}: Props) {\r\n  const {\r\n    authHeader,\r\n    userInfo,\r\n    userInfoError,\r\n    updatingAppointment,\r\n    updatingAppointmentId,\r\n    updatingAppointmentError,\r\n    appointments,\r\n    appointmentsError,\r\n  } = useAppSelector((state) => state.staff);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function login(values: LoginDetails) {\r\n    dispatch(loginApi(values));\r\n  }\r\n\r\n  function closeLoginError() {\r\n    dispatch(resetLoginError());\r\n  }\r\n\r\n  const updateAppointment = (status: AppointmentStatus) => (\r\n    appointmentId: number\r\n  ) => {\r\n    dispatch(setAppointmentStatusApi({ appointmentId, status }));\r\n  };\r\n\r\n  function closeUpdatingAppointmentError() {\r\n    dispatch(resetUpdatingError());\r\n  }\r\n\r\n  function watchAppointmentsSuccess(appointments: AppointmentInfo[]) {\r\n    dispatch(setStaffAppointments(appointments));\r\n  }\r\n\r\n  function watchAppointmentsError(error: Error) {\r\n    dispatch(setStaffAppointmentsError(error));\r\n  }\r\n\r\n  function logOut(): void {\r\n    dispatch(logout());\r\n  }\r\n\r\n  let source: EventSource | null = null;\r\n  useEffect(() => {\r\n    if (userInfo && authHeader) {\r\n      source = initStaffAppointmentsSource(\r\n        authHeader,\r\n        watchAppointmentsSuccess,\r\n        watchAppointmentsError\r\n      );\r\n    }\r\n    return () => {\r\n      source && source.close();\r\n    };\r\n  }, [userInfo]);\r\n\r\n  return (\r\n    <>\r\n      {!authHeader && (\r\n        <StaffLogIn\r\n          onSubmit={login}\r\n          loginError={userInfoError}\r\n          closeLoginError={closeLoginError}\r\n        />\r\n      )}\r\n      {!!authHeader && (\r\n        <Col span={24}>\r\n          <Col span={24}>\r\n            {userInfo && <StaffUserInfo userInfo={userInfo} logout={logOut} />}\r\n          </Col>\r\n          {userInfo && (\r\n            <StaffAppointments\r\n              userInfo={userInfo}\r\n              appointments={appointments}\r\n              appointmentsError={appointmentsError}\r\n              startAppointment={updateAppointment(\"STARTED\")}\r\n              endAppointment={updateAppointment(\"FINISHED\")}\r\n              cancelAppointment={updateAppointment(\"CANCELLED\")}\r\n              updating={updatingAppointment}\r\n              updatingAppointmentId={updatingAppointmentId}\r\n              updatingError={updatingAppointmentError}\r\n              closeUpdatingError={closeUpdatingAppointmentError}\r\n            />\r\n          )}\r\n        </Col>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Row, Col, Layout } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleCustomerMode } from \"../state/sliceMainPanel\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CustomerPanel } from \"./CustomerPanel\";\r\nimport { StaffPanel } from \"./StaffPanel\";\r\nimport { Content, Footer, Header } from \"antd/lib/layout/layout\";\r\n\r\ninterface Props {}\r\n\r\nexport function MainPanel({}: Props) {\r\n  const {\r\n    mainPanel: { customerMode },\r\n    customer: { appointmentInfo },\r\n    staff: { userInfo },\r\n  } = useAppSelector((state) => state);\r\n\r\n  const dispatch = useDispatch();\r\n  function toggleMode() {\r\n    dispatch(toggleCustomerMode());\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Content style={{ minHeight: \"30rem\", paddingTop: \"1rem\" }}>\r\n        <Col span={24} offset={18}>\r\n          {!appointmentInfo && !userInfo && (\r\n            <Button onClick={toggleMode}>\r\n              {customerMode ? \"Darbuotojams\" : \"Grįžti\"}\r\n            </Button>\r\n          )}\r\n        </Col>\r\n\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {!customerMode && <StaffPanel />}\r\n          {customerMode && <CustomerPanel />}\r\n        </Row>\r\n      </Content>\r\n      <Footer>Serve-On-Spot App, 2021</Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport mainPanelReducer from \"./sliceMainPanel\";\r\nimport customerReducer from \"./sliceCustomer\";\r\nimport staffReducer from \"./sliceStaff\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    mainPanel: mainPanelReducer,\r\n    customer: customerReducer,\r\n    staff: staffReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import \"./App.css\";\r\nimport { MainPanel } from \"./containers/MainPanel\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary\r\n        FallbackComponent={() => (\r\n          <p>Įvyko netikėta klaida. Perkraukite puslapį</p>\r\n        )}\r\n      >\r\n        <Provider store={store}>\r\n          <MainPanel />\r\n        </Provider>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n","import { AppointmentStatus, LoginDetails } from \"../state/dataTypes\";\r\n\r\nexport function createBasicAuthToken(loginDetails: LoginDetails) {\r\n  const { username, password } = loginDetails;\r\n  const unencodedDetails = username + \":\" + password;\r\n  return \"Basic \" + Buffer.from(unencodedDetails).toString(\"base64\");\r\n}\r\nexport function colorByAppointmentStatus(status: AppointmentStatus): string {\r\n  switch (status) {\r\n    case \"REGISTERED\":\r\n      return \"black\";\r\n    case \"UNREGISTERED\":\r\n      return \"grey\";\r\n    case \"CANCELLED\":\r\n      return \"red\";\r\n    case \"FINISHED\":\r\n      return \"blue\";\r\n    case \"STARTED\":\r\n      return \"green\";\r\n  }\r\n}\r\n\r\nexport function specialistTypeInfoBySpecialistType(type: string): string {\r\n  switch (type) {\r\n    case \"ONE_MINUTE\":\r\n      return \"1 min. specialistas\";\r\n    case \"FIVE_MINUTES\":\r\n      return \"5 min. specialistas\";\r\n    case \"NINE_MINUTES\":\r\n      return \"9 min. specialistas\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n"],"sourceRoot":""}