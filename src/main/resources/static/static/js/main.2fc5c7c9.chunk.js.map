{"version":3,"sources":["functions/utilFunctions.ts","state/sliceMainPanel.ts","state/hooks.ts","state/sliceCustomer.ts","functions/apiSourceFunctions.ts","components/customer/AppointmentInformation.tsx","components/customer/SpecialistsList.tsx","containers/CustomerPanel.tsx","components/staff/AppointmentsList.tsx","components/staff/LogInForm.tsx","components/staff/UserInfo.tsx","state/sliceStaff.ts","containers/StaffPanel.tsx","containers/MainPanel.tsx","state/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createBasicAuthToken","loginDetails","unencodedDetails","username","password","Buffer","from","toString","mainPanelSlice","createSlice","name","initialState","customerMode","reducers","toggleCustomerMode","state","actions","useAppSelector","useSelector","gettingSpecialists","gettingSpecialistsError","undefined","specialists","postingAppointment","appointmentError","appointmentInfo","unregisteringAppointment","unregisteringAppointmentError","registerWithSpecialistThunk","createAsyncThunk","specialistId","a","fetch","method","headers","body","JSON","stringify","response","json","data","unregisterWithSpecialistThunk","appointmentId","status","customerSlice","specialistsSuccess","action","payload","specialistsError","resetRegisteringError","watchAppointmentSuccess","watchAppointmentError","resetUnregisteringError","resetCustomerState","extraReducers","builder","addCase","pending","fulfilled","rejected","error","Error","message","initializeCustomerSpecialistsSource","onSuccess","onError","specialistsSource","EventSource","onerror","readyState","setTimeout","onmessage","parse","console","log","initCustomerAppointmentSource","appointmentsSource","initStaffAppointmentsSource","authHeader","EventSourcePolyfill","authorization","AppointmentInformation","unregisterAppointment","unregistering","unregisteringError","closeUnregisteringError","returnToMenu","positionOnTheList","specialist","approximateTimeLeft","visible","onCancel","footer","title","specialistInfo","style","width","border","type","onClick","loading","CustomerSpecialists","registerAppointment","registering","registeringError","closeRegisteringError","length","itemLayout","size","dataSource","renderItem","spec","Item","CustomerPanel","customer","dispatch","useDispatch","watchSpecialistsSuccess","watchSpecialistsError","watchAppointmentInfo","useEffect","close","appointmentSource","span","offset","loadingSpecialists","loadingSpecialistsError","StaffAppointments","userInfo","appointments","appointmentsError","startAppointment","endAppointment","cancelAppointment","updating","updatingError","closeUpdatingError","isAdmin","authority","justify","locale","emptyText","appointment","bodyStyle","display","extra","disabled","layout","labelCol","wrapperCol","tailLayout","StaffLogIn","onSubmit","loginError","closeLoginError","initialValues","remember","onFinish","label","rules","required","Password","htmlType","StaffUserInfo","logout","align","gettingUserInfo","userInfoError","updatingAppointment","updatingAppointmentError","updatedAppointment","loginThunk","loginDetais","thunkApi","authToken","rejectWithValue","changeAppointmentStatusThunk","input","getState","staff","staffSlice","setStaffAppointments","setAppointmentsError","resetLoginError","resetUpdatingError","meta","arg","map","StaffPanel","updateAppointment","watchAppointmentsSuccess","watchAppointmentsError","source","values","MainPanel","mainPanel","minHeight","paddingTop","store","configureStore","reducer","mainPanelReducer","customerReducer","staffReducer","middleware","getDefaultMiddleware","serializableCheck","App","className","FallbackComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2fc5c7c9.chunk.js","sourcesContent":["import { LoginDetails } from \"../state/dataTypes\";\r\n\r\nexport function createBasicAuthToken(loginDetails: LoginDetails) {\r\n  const { username, password } = loginDetails;\r\n  const unencodedDetails = username + \":\" + password;\r\n  return \"Basic \" + Buffer.from(unencodedDetails).toString(\"base64\");\r\n}\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport type { RootState } from \"./store\";\r\n\r\nexport interface MainPanelState {\r\n  customerMode: boolean;\r\n}\r\n\r\nconst initialState: MainPanelState = {\r\n  customerMode: true,\r\n};\r\n\r\nexport const mainPanelSlice = createSlice({\r\n  name: \"mainPanel\",\r\n  initialState,\r\n  reducers: {\r\n    toggleCustomerMode: (state) => {\r\n      state.customerMode = !state.customerMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleCustomerMode } = mainPanelSlice.actions;\r\n\r\nexport const selectCustomerMode = (state: RootState) =>\r\n  state.mainPanel.customerMode;\r\n\r\nexport default mainPanelSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { AppointmentInfo, Specialist } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\nexport interface CustomerState {\r\n  gettingSpecialists: boolean;\r\n  gettingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[] | undefined;\r\n  postingAppointment: boolean;\r\n  appointmentError: Error | undefined;\r\n  appointmentInfo: AppointmentInfo | undefined;\r\n  unregisteringAppointment: boolean;\r\n  unregisteringAppointmentError: Error | undefined;\r\n}\r\n\r\nconst initialState: CustomerState = {\r\n  gettingSpecialists: false,\r\n  gettingSpecialistsError: undefined,\r\n  specialists: undefined,\r\n  postingAppointment: false,\r\n  appointmentError: undefined,\r\n  appointmentInfo: undefined,\r\n  unregisteringAppointment: false,\r\n  unregisteringAppointmentError: undefined,\r\n};\r\n\r\nexport const registerWithSpecialistThunk = createAsyncThunk<\r\n  AppointmentInfo,\r\n  number,\r\n  {\r\n    state: CustomerState;\r\n  }\r\n>(\"customer/register\", postRegister);\r\n\r\nexport async function postRegister(\r\n  specialistId: number\r\n): Promise<AppointmentInfo> {\r\n  const response = await fetch(`http://localhost:8080/appointments`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ specialistId: specialistId }),\r\n  });\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n}\r\n\r\nexport const unregisterWithSpecialistThunk = createAsyncThunk<\r\n  AppointmentInfo,\r\n  number,\r\n  {\r\n    state: CustomerState;\r\n  }\r\n>(\"customer/unregisterAppointment\", patchUnregister);\r\n\r\nexport async function patchUnregister(\r\n  appointmentId: number\r\n): Promise<AppointmentInfo> {\r\n  const response = await fetch(\r\n    `http://localhost:8080/appointments/${appointmentId}`,\r\n    {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: \"UNREGISTERED\" }),\r\n    }\r\n  );\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n}\r\n\r\nexport const customerSlice = createSlice({\r\n  name: \"customer\",\r\n  initialState,\r\n  reducers: {\r\n    gettingSpecialists: (state) => {\r\n      state.gettingSpecialists = true;\r\n    },\r\n    specialistsSuccess: (state, action: PayloadAction<Specialist[]>) => {\r\n      state.gettingSpecialists = false;\r\n      state.specialists = action.payload;\r\n    },\r\n    specialistsError: (state, action: PayloadAction<Error>) => {\r\n      state.gettingSpecialists = false;\r\n      state.appointmentError = action.payload;\r\n    },\r\n    resetRegisteringError: (state) => {\r\n      state.appointmentError = undefined;\r\n    },\r\n    watchAppointmentSuccess: (\r\n      state,\r\n      action: PayloadAction<AppointmentInfo>\r\n    ) => {\r\n      state.appointmentInfo = action.payload;\r\n    },\r\n    watchAppointmentError: (state, action: PayloadAction<Error>) => {\r\n      state.appointmentError = action.payload;\r\n    },\r\n    resetUnregisteringError: (state) => {\r\n      state.unregisteringAppointmentError = undefined;\r\n    },\r\n    resetCustomerState: (state) => {\r\n      return initialState;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(registerWithSpecialistThunk.pending, (state) => {\r\n      state.postingAppointment = true;\r\n    });\r\n    builder.addCase(registerWithSpecialistThunk.fulfilled, (state, action) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentInfo = action.payload;\r\n      state.appointmentError = undefined;\r\n    });\r\n    builder.addCase(registerWithSpecialistThunk.rejected, (state, action) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n    builder.addCase(unregisterWithSpecialistThunk.pending, (state) => {\r\n      state.unregisteringAppointment = true;\r\n    });\r\n    builder.addCase(\r\n      unregisterWithSpecialistThunk.fulfilled,\r\n      (state, action) => {\r\n        state.appointmentInfo = action.payload;\r\n        state.unregisteringAppointment = false;\r\n        state.unregisteringAppointmentError = undefined;\r\n      }\r\n    );\r\n    builder.addCase(unregisterWithSpecialistThunk.rejected, (state, action) => {\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringAppointmentError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  gettingSpecialists,\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  resetRegisteringError,\r\n  watchAppointmentSuccess,\r\n  watchAppointmentError,\r\n  resetUnregisteringError,\r\n  resetCustomerState,\r\n} = customerSlice.actions;\r\n\r\nexport default customerSlice.reducer;\r\n","import { AppointmentInfo, Specialist } from \"../state/dataTypes\";\r\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\r\n\r\nexport function initializeCustomerSpecialistsSource(\r\n  onSuccess: (specialists: Specialist[]) => void,\r\n  onError: (error: Error) => void\r\n): EventSource {\r\n  const specialistsSource = new EventSource(\r\n    \"http://127.0.0.1:8080/specialists\"\r\n  );\r\n  specialistsSource.onerror = () => {\r\n    onError(new Error(\"Nepavyko gauti specialistų duomenų\"));\r\n    if (specialistsSource.readyState === 2) {\r\n      setTimeout(initializeCustomerSpecialistsSource, 300);\r\n    }\r\n  };\r\n  specialistsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    console.log(data);\r\n\r\n    onSuccess(data);\r\n  };\r\n  return specialistsSource;\r\n}\r\n\r\nexport function initCustomerAppointmentSource(\r\n  appointmentId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSource(\r\n    `http://127.0.0.1:8080/appointments/${appointmentId}`\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initCustomerAppointmentSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    console.log(\"appointment\", data);\r\n\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function initStaffAppointmentsSource(\r\n  authHeader: string,\r\n  onSuccess: (appointmentInfo: AppointmentInfo[]) => void,\r\n  onError: (error: Error) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSourcePolyfill(\r\n    `http://127.0.0.1:8080/appointments`,\r\n    {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: authHeader,\r\n      },\r\n    }\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initStaffAppointmentsSource, 300);\r\n      return onError(new Error(\"Nepavyko gauti vizitų duomenų\"));\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message: any) => {\r\n    const data = JSON.parse(message.data);\r\n    // console.log(\"appointment\", data);\r\n\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n","import { Button, Card } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { AppointmentInfo } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  appointmentInfo: AppointmentInfo;\r\n  unregisterAppointment: () => void;\r\n  unregistering: boolean;\r\n  unregisteringError: Error | undefined;\r\n  closeUnregisteringError: () => void;\r\n  returnToMenu: () => void;\r\n}\r\n\r\nexport function AppointmentInformation({\r\n  appointmentInfo,\r\n  unregisterAppointment,\r\n  unregistering,\r\n  unregisteringError,\r\n  closeUnregisteringError,\r\n  returnToMenu,\r\n}: Props) {\r\n  const {\r\n    positionOnTheList,\r\n    message,\r\n    specialist,\r\n    status,\r\n    approximateTimeLeft,\r\n  } = appointmentInfo;\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={!!unregisteringError}\r\n        onCancel={closeUnregisteringError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, pabandykite vėliau</p>\r\n      </Modal>\r\n      <Card\r\n        title={`${specialist.specialistInfo}`}\r\n        style={{\r\n          width: 300,\r\n          border: status === \"STARTED\" ? \"5px solid green\" : \"5px solid yellow\",\r\n        }}\r\n      >\r\n        <>\r\n          Informacija:\r\n          <p>{message}</p>\r\n          <p>{approximateTimeLeft}</p>\r\n        </>\r\n        {status === \"REGISTERED\" && (\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={unregisterAppointment}\r\n            loading={unregistering}\r\n          >\r\n            Atšaukti\r\n          </Button>\r\n        )}\r\n        {(status === \"UNREGISTERED\" ||\r\n          status === \"FINISHED\" ||\r\n          status === \"CANCELLED\") && (\r\n          <Button type=\"primary\" onClick={returnToMenu}>\r\n            Atgal\r\n          </Button>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { Button, List, Card } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Specialist } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  registerAppointment: (specialistId: number) => void;\r\n  registering: boolean;\r\n  registeringError: Error | undefined;\r\n  closeRegisteringError: () => void;\r\n  loadingSpecialists: boolean;\r\n  loadingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[];\r\n}\r\n\r\nexport function CustomerSpecialists({\r\n  registerAppointment,\r\n  registering,\r\n  registeringError,\r\n  closeRegisteringError,\r\n  specialists,\r\n}: Props) {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        visible={!!registeringError}\r\n        onCancel={closeRegisteringError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, pabandykite vėliau</p>\r\n      </Modal>\r\n      <>\r\n        {specialists.length && (\r\n          <>\r\n            <div>Specialistai:</div>\r\n\r\n            <List\r\n              itemLayout=\"vertical\"\r\n              size=\"large\"\r\n              dataSource={specialists}\r\n              renderItem={(spec) => (\r\n                <List.Item>\r\n                  <Card\r\n                    title={spec.specialistInfo}\r\n                    style={{ border: \"5px solid green\" }}\r\n                  >\r\n                    <Button\r\n                      type=\"primary\"\r\n                      onClick={() => registerAppointment(spec.specialistId)}\r\n                      loading={registering}\r\n                    >\r\n                      Registruotis\r\n                    </Button>\r\n                  </Card>\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </>\r\n        )}\r\n      </>\r\n      {specialists.length === 0 && \"Šiuo metu nėra dirbančių specialistų\"}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  resetRegisteringError,\r\n  resetCustomerState,\r\n  registerWithSpecialistThunk,\r\n  unregisterWithSpecialistThunk,\r\n  watchAppointmentSuccess,\r\n  watchAppointmentError,\r\n  resetUnregisteringError,\r\n} from \"../state/sliceCustomer\";\r\nimport {\r\n  initCustomerAppointmentSource,\r\n  initializeCustomerSpecialistsSource,\r\n} from \"../functions/apiSourceFunctions\";\r\nimport { AppointmentInfo, Specialist } from \"../state/dataTypes\";\r\nimport { AppointmentInformation } from \"../components/customer/AppointmentInformation\";\r\nimport { CustomerSpecialists } from \"../components/customer/SpecialistsList\";\r\nimport { Col, Row } from \"antd\";\r\n\r\nexport function CustomerPanel() {\r\n  const {\r\n    gettingSpecialists,\r\n    gettingSpecialistsError,\r\n    specialists,\r\n    postingAppointment,\r\n    appointmentError,\r\n    appointmentInfo,\r\n    unregisteringAppointment,\r\n    unregisteringAppointmentError,\r\n  } = useAppSelector((state) => state.customer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function watchSpecialistsSuccess(specialists: Specialist[]) {\r\n    dispatch(specialistsSuccess(specialists));\r\n  }\r\n\r\n  function watchSpecialistsError(error: Error) {\r\n    dispatch(specialistsError(error));\r\n  }\r\n\r\n  function registerWithSpecialist(specialistId: number) {\r\n    dispatch(registerWithSpecialistThunk(specialistId));\r\n  }\r\n\r\n  function closeRegisteringError() {\r\n    dispatch(resetRegisteringError());\r\n  }\r\n\r\n  function watchAppointmentInfo(appointmentInfo: AppointmentInfo) {\r\n    dispatch(watchAppointmentSuccess(appointmentInfo));\r\n  }\r\n\r\n  function watchAppointmentInfoError(error: Error) {\r\n    dispatch(watchAppointmentError(error));\r\n  }\r\n\r\n  function unregister(appointmentId: number) {\r\n    dispatch(unregisterWithSpecialistThunk(appointmentId));\r\n  }\r\n\r\n  function closeUnregisteringError() {\r\n    dispatch(resetUnregisteringError());\r\n  }\r\n\r\n  function returnToCustomerMenu() {\r\n    dispatch(resetCustomerState());\r\n  }\r\n\r\n  let specialistsSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (!appointmentInfo) {\r\n      specialistsSource = initializeCustomerSpecialistsSource(\r\n        watchSpecialistsSuccess,\r\n        watchSpecialistsError\r\n      );\r\n    } else {\r\n      specialistsSource && specialistsSource.close();\r\n    }\r\n    return () => {\r\n      specialistsSource && specialistsSource.close();\r\n    };\r\n  }, [appointmentInfo]);\r\n\r\n  let appointmentSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (appointmentInfo) {\r\n      appointmentSource = initCustomerAppointmentSource(\r\n        appointmentInfo.appointmentId,\r\n        watchAppointmentInfo\r\n        // watchAppointmentInfoError\r\n      );\r\n      return () => {\r\n        appointmentSource && appointmentSource.close();\r\n      };\r\n    }\r\n  }, [appointmentInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {!specialists && (\r\n        <Row>\r\n          <Col span={12} offset={6}>\r\n            Laukiama specialistų duomenų\r\n          </Col>\r\n        </Row>\r\n      )}\r\n      {specialists && !appointmentInfo && (\r\n        <CustomerSpecialists\r\n          registerAppointment={registerWithSpecialist}\r\n          registering={postingAppointment}\r\n          registeringError={appointmentError}\r\n          closeRegisteringError={closeRegisteringError}\r\n          loadingSpecialists={gettingSpecialists}\r\n          loadingSpecialistsError={gettingSpecialistsError}\r\n          specialists={specialists}\r\n        />\r\n      )}\r\n      {appointmentInfo && (\r\n        <AppointmentInformation\r\n          appointmentInfo={appointmentInfo}\r\n          unregisterAppointment={() =>\r\n            unregister(appointmentInfo.appointmentId)\r\n          }\r\n          unregistering={unregisteringAppointment}\r\n          unregisteringError={unregisteringAppointmentError}\r\n          closeUnregisteringError={closeUnregisteringError}\r\n          returnToMenu={returnToCustomerMenu}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Card, Col, List, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { AppointmentInfo, UserInfo } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  appointments: AppointmentInfo[] | undefined;\r\n  appointmentsError?: Error;\r\n  startAppointment: (appointmentId: number) => void;\r\n  endAppointment: (appointmentId: number) => void;\r\n  cancelAppointment: (appointmentId: number) => void;\r\n  updating: boolean;\r\n  updatingError: Error | undefined;\r\n  closeUpdatingError: () => void;\r\n}\r\n\r\nexport function StaffAppointments({\r\n  userInfo,\r\n  appointments,\r\n  appointmentsError,\r\n  startAppointment,\r\n  endAppointment,\r\n  cancelAppointment,\r\n  updating,\r\n  updatingError,\r\n  closeUpdatingError,\r\n}: Props) {\r\n  const isAdmin = userInfo.authority === \"ADMIN\";\r\n  return (\r\n    <>\r\n      <Modal\r\n        visible={!!updatingError}\r\n        onCancel={closeUpdatingError}\r\n        footer={null}\r\n      >\r\n        <p>Įvyko klaida, bandykite vėliau</p>\r\n      </Modal>\r\n      <Row>\r\n        {appointmentsError && (\r\n          <Col span={12} offset={6}>\r\n            Klaida gaunant vizitų duomenis, palaukite\r\n          </Col>\r\n        )}\r\n        {!appointmentsError && (\r\n          <Col span={12} offset={6}>\r\n            {userInfo && !appointments ? \"Laukiama vizitų duomenų\" : \"Vizitai\"}\r\n          </Col>\r\n        )}\r\n      </Row>\r\n      {appointments !== undefined && (\r\n        <Row justify=\"center\">\r\n          <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={appointments}\r\n            locale={{ emptyText: \"Šiuo metu prisiregistravusių nėra.\" }}\r\n            renderItem={(appointment) => (\r\n              <List.Item>\r\n                <Card\r\n                  bodyStyle={{ display: isAdmin ? \"none\" : undefined }}\r\n                  style={{\r\n                    width: 300,\r\n                    border:\r\n                      appointment.status === \"STARTED\"\r\n                        ? \"5px solid green\"\r\n                        : \"5px solid yellow\",\r\n                  }}\r\n                  title={`${appointment.appointmentId}: ${\r\n                    appointment.status === \"REGISTERED\" ? \"laukia\" : \"vyksta\"\r\n                  }`}\r\n                  extra={\r\n                    !isAdmin && (\r\n                      <Button\r\n                        onClick={() =>\r\n                          cancelAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                        size=\"small\"\r\n                      >\r\n                        atšaukti\r\n                      </Button>\r\n                    )\r\n                  }\r\n                >\r\n                  {!isAdmin && (\r\n                    <>\r\n                      <Button\r\n                        disabled={appointment.status === \"STARTED\"}\r\n                        onClick={() =>\r\n                          startAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                      >\r\n                        pradėti\r\n                      </Button>\r\n                      <Button\r\n                        disabled={appointment.status !== \"STARTED\"}\r\n                        onClick={() =>\r\n                          endAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                      >\r\n                        baigti\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </Card>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Col, Form, Input, Row } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { LoginDetails } from \"../../state/dataTypes\";\r\n\r\ninterface Props {\r\n  onSubmit: (values: LoginDetails) => void;\r\n  loginError: Error | undefined;\r\n  closeLoginError: () => void;\r\n}\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport function StaffLogIn({ onSubmit, loginError, closeLoginError }: Props) {\r\n  return (\r\n    <Row>\r\n      <Modal visible={!!loginError} onCancel={closeLoginError} footer={null}>\r\n        <p>Prisijungti nepavyko</p>\r\n      </Modal>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n      >\r\n        <Form.Item\r\n          label=\"Vartotojas\"\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Vartotojo vardas būtinas!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Slaptažodis\"\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Slaptažodis būtinas!\" }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Prisijungti\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Row>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport { UserInfo } from \"../../state/dataTypes\";\r\nimport { Col, Row } from \"antd\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  logout: () => void;\r\n}\r\n\r\nexport function StaffUserInfo({ userInfo, logout }: Props) {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={6} offset={16}>\r\n          <Row justify=\"end\">\r\n            <Button onClick={logout}>Atsijungti</Button>\r\n          </Row>\r\n          <Row justify=\"end\">\r\n            <div>{`Prisijunges kaip:`}</div>\r\n          </Row>\r\n          <Row justify=\"end\" align=\"middle\">\r\n            <div>\r\n              {userInfo.specialist !== null\r\n                ? userInfo.specialist.specialistInfo\r\n                : userInfo.authority}\r\n            </div>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { createBasicAuthToken } from \"../functions/utilFunctions\";\r\nimport {\r\n  AppointmentInfo,\r\n  AppointmentStatus,\r\n  LoginDetails,\r\n  UserInfo,\r\n} from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\nexport interface StaffState {\r\n  gettingUserInfo: boolean;\r\n  userInfo: UserInfo | undefined;\r\n  authHeader: string | undefined;\r\n  userInfoError: Error | undefined;\r\n  updatingAppointment: boolean;\r\n  updatingAppointmentError: Error | undefined;\r\n  updatedAppointment: AppointmentInfo | undefined;\r\n  appointments: AppointmentInfo[] | undefined;\r\n  appointmentsError: Error | undefined;\r\n}\r\n\r\nconst initialState: StaffState = {\r\n  gettingUserInfo: false,\r\n  userInfo: undefined,\r\n  authHeader: undefined,\r\n  userInfoError: undefined,\r\n  updatingAppointment: false,\r\n  updatingAppointmentError: undefined,\r\n  updatedAppointment: undefined,\r\n  appointments: undefined,\r\n  appointmentsError: undefined,\r\n};\r\n\r\nexport const loginThunk = createAsyncThunk<\r\n  UserInfo,\r\n  LoginDetails,\r\n  { rejectValue: Error }\r\n>(\"staff/login\", async (loginDetais, thunkApi) => {\r\n  const authToken = createBasicAuthToken(loginDetais);\r\n  const response = await fetch(`http://localhost:8080/user`, {\r\n    method: \"GET\",\r\n    headers: {\r\n      authorization: authToken,\r\n      \"Access-Control-Allow-Origin\": \"*\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n  if (\r\n    response.status === 400 ||\r\n    response.status === 401 ||\r\n    response.status === 500\r\n  ) {\r\n    return thunkApi.rejectWithValue((await response.json()) as Error);\r\n  }\r\n\r\n  return data as UserInfo;\r\n});\r\n\r\nexport const changeAppointmentStatusThunk = createAsyncThunk<\r\n  AppointmentInfo,\r\n  { appointmentId: number; status: AppointmentStatus },\r\n  {\r\n    state: RootState;\r\n  }\r\n>(\"staff/updateAppointment\", async (input, thunkApi) => {\r\n  const response = await fetch(\r\n    `http://localhost:8080/appointments/${input.appointmentId}`,\r\n    {\r\n      method: \"PATCH\",\r\n      headers: {\r\n        authorization: `${thunkApi.getState().staff.authHeader}`,\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ status: input.status }),\r\n    }\r\n  );\r\n  if (\r\n    response.status === 400 ||\r\n    response.status === 401 ||\r\n    response.status === 500\r\n  ) {\r\n    return thunkApi.rejectWithValue((await response.json()) as Error);\r\n  }\r\n  const data = await response.json();\r\n  return data as AppointmentInfo;\r\n});\r\n\r\nexport const staffSlice = createSlice({\r\n  name: \"staff\",\r\n  initialState,\r\n  reducers: {\r\n    setStaffAppointments: (state, action: PayloadAction<AppointmentInfo[]>) => {\r\n      state.appointments = action.payload;\r\n      state.appointmentsError = undefined;\r\n    },\r\n    setAppointmentsError: (state, action: PayloadAction<Error>) => {\r\n      console.log(action);\r\n      state.appointments = undefined;\r\n      state.appointmentsError = action.payload;\r\n    },\r\n    resetLoginError: (state) => {\r\n      state.userInfoError = undefined;\r\n    },\r\n    resetUpdatingError: (state) => {\r\n      state.updatingAppointmentError = undefined;\r\n    },\r\n    logout: (state) => {\r\n      return initialState;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(loginThunk.pending, (state) => {\r\n      state.gettingUserInfo = true;\r\n    });\r\n    builder.addCase(loginThunk.fulfilled, (state, action) => {\r\n      state.gettingUserInfo = false;\r\n      state.userInfo = action.payload;\r\n      state.userInfoError = undefined;\r\n      state.authHeader = createBasicAuthToken({\r\n        username: action.meta.arg.username,\r\n        password: action.meta.arg.password,\r\n      });\r\n    });\r\n    builder.addCase(loginThunk.rejected, (state, action) => {\r\n      console.log(action);\r\n      state.gettingUserInfo = false;\r\n      state.userInfo = undefined;\r\n      state.userInfoError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n    builder.addCase(changeAppointmentStatusThunk.pending, (state) => {\r\n      state.updatingAppointment = true;\r\n    });\r\n    builder.addCase(changeAppointmentStatusThunk.fulfilled, (state, action) => {\r\n      state.updatingAppointment = false;\r\n      state.appointments = state.appointments?.map((a) =>\r\n        a.appointmentId === action.payload.appointmentId ? action.payload : a\r\n      );\r\n      state.updatingAppointmentError = undefined;\r\n    });\r\n    builder.addCase(changeAppointmentStatusThunk.rejected, (state, action) => {\r\n      console.log(action);\r\n      state.updatingAppointment = false;\r\n      state.updatingAppointmentError = action.error\r\n        ? new Error(action.error.message)\r\n        : undefined;\r\n    });\r\n  },\r\n});\r\n\r\nexport const {\r\n  resetLoginError,\r\n  setStaffAppointments,\r\n  setAppointmentsError,\r\n  resetUpdatingError,\r\n  logout,\r\n} = staffSlice.actions;\r\n\r\nexport const selectAuthenticationHeader = (state: RootState) =>\r\n  state.staff.authHeader;\r\n\r\nexport default staffSlice.reducer;\r\n","import { Col } from \"antd\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { StaffAppointments } from \"../components/staff/AppointmentsList\";\r\nimport { StaffLogIn } from \"../components/staff/LogInForm\";\r\nimport { StaffUserInfo } from \"../components/staff/UserInfo\";\r\nimport { initStaffAppointmentsSource } from \"../functions/apiSourceFunctions\";\r\nimport {\r\n  AppointmentInfo,\r\n  AppointmentStatus,\r\n  LoginDetails,\r\n} from \"../state/dataTypes\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  setStaffAppointments,\r\n  logout,\r\n  changeAppointmentStatusThunk,\r\n  loginThunk,\r\n  resetLoginError,\r\n  resetUpdatingError,\r\n  setAppointmentsError,\r\n} from \"../state/sliceStaff\";\r\n\r\ninterface Props {}\r\n\r\nexport function StaffPanel({}: Props) {\r\n  const {\r\n    authHeader,\r\n    userInfo,\r\n    userInfoError,\r\n    updatingAppointment,\r\n    updatingAppointmentError,\r\n    appointments,\r\n    appointmentsError,\r\n  } = useAppSelector((state) => state.staff);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function login(values: LoginDetails) {\r\n    dispatch(loginThunk(values));\r\n  }\r\n\r\n  function closeLoginError() {\r\n    dispatch(resetLoginError());\r\n  }\r\n\r\n  const updateAppointment = (status: AppointmentStatus) => (\r\n    appointmentId: number\r\n  ) => {\r\n    dispatch(changeAppointmentStatusThunk({ appointmentId, status }));\r\n  };\r\n\r\n  function closeUpdatingAppointmentError() {\r\n    dispatch(resetUpdatingError());\r\n  }\r\n\r\n  function watchAppointmentsSuccess(appointments: AppointmentInfo[]) {\r\n    dispatch(setStaffAppointments(appointments));\r\n  }\r\n\r\n  function watchAppointmentsError(error: Error) {\r\n    dispatch(setAppointmentsError(error));\r\n  }\r\n\r\n  function logOut(): void {\r\n    dispatch(logout());\r\n  }\r\n\r\n  let source: EventSource | null = null;\r\n  useEffect(() => {\r\n    if (userInfo && authHeader) {\r\n      source = initStaffAppointmentsSource(\r\n        authHeader,\r\n        watchAppointmentsSuccess,\r\n        watchAppointmentsError\r\n      );\r\n    }\r\n    return () => {\r\n      source && source.close();\r\n    };\r\n  }, [userInfo]);\r\n\r\n  return (\r\n    <>\r\n      {!authHeader && (\r\n        <StaffLogIn\r\n          onSubmit={login}\r\n          loginError={userInfoError}\r\n          closeLoginError={closeLoginError}\r\n        />\r\n      )}\r\n      {!!authHeader && (\r\n        <Col span={24}>\r\n          <Col span={24}>\r\n            {userInfo && <StaffUserInfo userInfo={userInfo} logout={logOut} />}\r\n          </Col>\r\n          {userInfo && (\r\n            <StaffAppointments\r\n              userInfo={userInfo}\r\n              appointments={appointments}\r\n              appointmentsError={appointmentsError}\r\n              startAppointment={updateAppointment(\"STARTED\")}\r\n              endAppointment={updateAppointment(\"FINISHED\")}\r\n              cancelAppointment={updateAppointment(\"CANCELLED\")}\r\n              updating={updatingAppointment}\r\n              updatingError={updatingAppointmentError}\r\n              closeUpdatingError={closeUpdatingAppointmentError}\r\n            />\r\n          )}\r\n        </Col>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Row, Col, Layout } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleCustomerMode } from \"../state/sliceMainPanel\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CustomerPanel } from \"./CustomerPanel\";\r\nimport { StaffPanel } from \"./StaffPanel\";\r\nimport { Content, Footer, Header } from \"antd/lib/layout/layout\";\r\n\r\ninterface Props {}\r\n\r\nexport function MainPanel({}: Props) {\r\n  const {\r\n    mainPanel: { customerMode },\r\n    customer: { appointmentInfo },\r\n    staff: { userInfo },\r\n  } = useAppSelector((state) => state);\r\n\r\n  const dispatch = useDispatch();\r\n  function toggleMode() {\r\n    dispatch(toggleCustomerMode());\r\n  }\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Content style={{ minHeight: \"30rem\", paddingTop: \"1rem\" }}>\r\n        <Col span={24} offset={18}>\r\n          {!appointmentInfo && !userInfo && (\r\n            <Button onClick={toggleMode}>\r\n              {customerMode ? \"Darbuotojams\" : \"Grįžti\"}\r\n            </Button>\r\n          )}\r\n        </Col>\r\n\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {!customerMode && <StaffPanel />}\r\n          {customerMode && <CustomerPanel />}\r\n        </Row>\r\n      </Content>\r\n      <Footer>Serve-On-Spot App, 2021</Footer>\r\n    </Layout>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport mainPanelReducer from \"./sliceMainPanel\";\r\nimport customerReducer from \"./sliceCustomer\";\r\nimport staffReducer from \"./sliceStaff\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    mainPanel: mainPanelReducer,\r\n    customer: customerReducer,\r\n    staff: staffReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import \"./App.css\";\r\nimport { MainPanel } from \"./containers/MainPanel\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary FallbackComponent={() => <p>whoops</p>}>\r\n        <Provider store={store}>\r\n          <MainPanel />\r\n        </Provider>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}