{"version":3,"sources":["state/sliceApp.ts","state/hooks.ts","state/sliceCustomer.ts","components/CustomerAppointment.tsx","components/CustomerSpecialists.tsx","containers/CustomerPanel.tsx","components/StaffAppointments.tsx","components/StaffLogIn.tsx","components/StaffUserInfo.tsx","state/sliceStaff.ts","containers/StaffPanel.tsx","containers/MainPanel.tsx","state/store.ts","App.tsx","reportWebVitals.ts","index.tsx","functions/apiFunctions.ts"],"names":["initialState","customerMode","authenticationHeader","undefined","userInfo","appSlice","createSlice","name","reducers","toggleAppointmentMode","state","actions","useAppSelector","useSelector","gettingSpecialists","gettingSpecialistsError","specialists","postingAppointment","appointmentError","appointmentInfo","unregisteringAppointment","unregisteringAppointmentError","customerSlice","specialistsSuccess","action","payload","specialistsError","postingAppointmentSuccess","postingAppointmentError","unregistering","unregisteringSuccess","unregisteringError","resetCustomerState","CustomerAppointment","unregisterAppointment","returnToMenu","message","positionOnTheList","specialist","status","approximateTimeLeft","title","specialistInfo","style","width","border","type","disabled","onClick","loading","CustomerSpecialists","registerAppointment","registering","registeringError","length","itemLayout","size","dataSource","renderItem","spec","Item","specialistId","CustomerPanel","customer","dispatch","useDispatch","trackAppointmentSuccess","closeSpecs","specialistsSource","close","useEffect","initializeSpecialistsSource","error","addEventListener","appointmentSource","initializeWatchedAppointmentSource","appointmentId","loadingSpecialists","loadingSpecialistsError","StaffAppointments","appointments","startAppointment","appointmentsError","endAppointment","cancelAppointment","updating","isAdmin","updatingError","authority","span","offset","justify","locale","emptyText","appointment","bodyStyle","display","extra","layout","labelCol","wrapperCol","tailLayout","StaffLogIn","onSubmit","initialValues","remember","onFinish","label","rules","required","Password","htmlType","StaffUserInfo","logout","align","updatingAppointment","updatingAppointmentError","updatedAppointment","staffSlice","setAppointments","setAppointmentsError","updateAppointment","updateAppointmentError","updateAppointmentSuccess","setUserInfoAndAuthenticationHeader","header","resetStaffState","selectAuthenticationHeader","staff","StaffPanel","isAuthenticated","setHeaderAndUserInfo","updateAppointmentStatus","source","initializeAppointmentsSource","console","log","values","authenticateStaffMember","MainPanel","app","minHeight","store","configureStore","reducer","appReducer","customerReducer","staffReducer","middleware","getDefaultMiddleware","serializableCheck","App","className","FallbackComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","onSuccess","onError","EventSource","onerror","Error","readyState","setTimeout","onmessage","data","JSON","parse","axios","post","headers","res","catch","appointmentsSource","patch","loginDetais","setAuthHeader","authToken","loginDetails","username","password","unencodedDetails","Buffer","from","toString","createBasicAuthToken","get","authorization","setCustomers","EventSourcePolyfill","appointmentStatus"],"mappings":"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","file":"static/js/main.1af6c935.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, UserInfo } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface AppState {\r\n  customerMode: boolean;\r\n  authenticationHeader: string | undefined;\r\n  userInfo: UserInfo | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: AppState = {\r\n  customerMode: true,\r\n  authenticationHeader: undefined,\r\n  userInfo: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    toggleAppointmentMode: (state) => {\r\n      state.customerMode = !state.customerMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { toggleAppointmentMode } = appSlice.actions;\r\n\r\nexport const selectAppointmentMode = (state: RootState) =>\r\n  state.app.customerMode;\r\n\r\nexport default appSlice.reducer;\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"./store\";\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, AppointmentInfo, Specialist } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface CustomerState {\r\n  gettingSpecialists: boolean;\r\n  gettingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[] | undefined;\r\n  postingAppointment: boolean;\r\n  appointmentError: Error | undefined;\r\n  appointmentInfo: AppointmentInfo | undefined;\r\n  unregisteringAppointment: boolean;\r\n  unregisteringAppointmentError: Error | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CustomerState = {\r\n  gettingSpecialists: false,\r\n  gettingSpecialistsError: undefined,\r\n  specialists: undefined,\r\n  postingAppointment: false,\r\n  appointmentError: undefined,\r\n  appointmentInfo: undefined,\r\n  unregisteringAppointment: false,\r\n  unregisteringAppointmentError: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const customerSlice = createSlice({\r\n  name: \"customer\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    gettingSpecialists: (state) => {\r\n      state.gettingSpecialists = true;\r\n    },\r\n    specialistsSuccess: (state, action: PayloadAction<Specialist[]>) => {\r\n      state.gettingSpecialists = false;\r\n      state.specialists = action.payload;\r\n    },\r\n    specialistsError: (state, action: PayloadAction<Error>) => {\r\n      state.gettingSpecialists = false;\r\n      state.appointmentError = action.payload;\r\n    },\r\n    postingAppointment: (state) => {\r\n      state.postingAppointment = true;\r\n    },\r\n    postingAppointmentSuccess: (\r\n      state,\r\n      action: PayloadAction<AppointmentInfo>\r\n    ) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentInfo = action.payload;\r\n    },\r\n    postingAppointmentError: (state, action: PayloadAction<Error>) => {\r\n      state.postingAppointment = false;\r\n      state.appointmentError = action.payload;\r\n    },\r\n    unregistering: (state) => {\r\n      state.unregisteringAppointment = true;\r\n    },\r\n    unregisteringSuccess: (state) => {\r\n      state.appointmentInfo = undefined;\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringAppointmentError = undefined;\r\n    },\r\n    unregisteringError: (state, action: PayloadAction<Error>) => {\r\n      state.unregisteringAppointment = false;\r\n      state.unregisteringAppointmentError = action.payload;\r\n    },\r\n    resetCustomerState: (state) => {\r\n      return initialState;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n  },\r\n});\r\n\r\nexport const {\r\n  postingAppointment,\r\n  postingAppointmentSuccess,\r\n  postingAppointmentError,\r\n  gettingSpecialists,\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  unregistering,\r\n  unregisteringSuccess,\r\n  unregisteringError,\r\n  resetCustomerState,\r\n} = customerSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectSpecialists = (state: RootState) =>\r\n  state.customer.specialists;\r\nexport const selectAppointment = (state: RootState) =>\r\n  state.customer.appointmentInfo;\r\n\r\nexport const selectPostingAppointmentStatus = (state: RootState) =>\r\n  state.customer.postingAppointment;\r\n\r\nexport default customerSlice.reducer;\r\n","import { Button, Card } from \"antd\";\r\nimport { AppointmentInfo } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  appointmentInfo: AppointmentInfo;\r\n  unregisterAppointment: () => void;\r\n  unregistering: boolean;\r\n  unregisteringError: Error | undefined;\r\n  returnToMenu: () => void;\r\n}\r\n\r\nexport function CustomerAppointment({\r\n  appointmentInfo,\r\n  unregisterAppointment,\r\n  unregistering,\r\n  returnToMenu,\r\n}: Props) {\r\n  const {\r\n    positionOnTheList,\r\n    message,\r\n    specialist,\r\n    status,\r\n    approximateTimeLeft,\r\n  } = appointmentInfo;\r\n\r\n  return (\r\n    <>\r\n      <Card\r\n        title={`${specialist.specialistInfo}`}\r\n        style={{\r\n          width: 300,\r\n          border: status === \"STARTED\" ? \"5px solid green\" : \"5px solid yellow\",\r\n        }}\r\n      >\r\n        <>\r\n          Informacija:\r\n          <p>{message}</p>\r\n          <p>{approximateTimeLeft}</p>\r\n        </>\r\n        {status !== \"FINISHED\" && (\r\n          <Button\r\n            type=\"primary\"\r\n            disabled={status !== \"REGISTERED\"}\r\n            onClick={unregisterAppointment}\r\n            loading={unregistering}\r\n          >\r\n            Atšaukti\r\n          </Button>\r\n        )}\r\n        {status === \"FINISHED\" && (\r\n          <Button type=\"primary\" onClick={returnToMenu}>\r\n            Atgal\r\n          </Button>\r\n        )}\r\n      </Card>\r\n    </>\r\n  );\r\n}\r\n","import { Button, List, Card } from \"antd\";\r\nimport { Specialist } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  registerAppointment: (specialistId: number) => void;\r\n  registering: boolean;\r\n  registeringError: Error | undefined;\r\n  loadingSpecialists: boolean;\r\n  loadingSpecialistsError: Error | undefined;\r\n  specialists: Specialist[];\r\n}\r\n\r\nexport function CustomerSpecialists({\r\n  registerAppointment,\r\n  registering,\r\n  registeringError,\r\n  specialists,\r\n}: Props) {\r\n  return (\r\n    <div>\r\n      {!specialists ? (\r\n        \"Laukiama duomenų\"\r\n      ) : (\r\n        <>\r\n          {specialists.length && (\r\n            <>\r\n              <div>Dirbantys specialistai:</div>\r\n\r\n              <List\r\n                itemLayout=\"vertical\"\r\n                size=\"large\"\r\n                dataSource={specialists}\r\n                renderItem={(spec) => (\r\n                  <List.Item>\r\n                    <Card\r\n                      title={spec.specialistInfo}\r\n                      style={{ border: \"5px solid green\" }}\r\n                    >\r\n                      <Button\r\n                        type=\"primary\"\r\n                        onClick={() => registerAppointment(spec.specialistId)}\r\n                        loading={registering}\r\n                      >\r\n                        Registruotis\r\n                      </Button>\r\n                    </Card>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n      {specialists.length === 0 && \"Šiuo metu nėra dirbančių specialistų\"}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  specialistsSuccess,\r\n  specialistsError,\r\n  postingAppointmentError,\r\n  postingAppointmentSuccess,\r\n  unregisteringSuccess,\r\n  unregisteringError,\r\n  resetCustomerState,\r\n} from \"../state/sliceCustomer\";\r\nimport {\r\n  initializeSpecialistsSource,\r\n  initializeWatchedAppointmentSource,\r\n  registerAppointment,\r\n  unregisterAppointment,\r\n} from \"../functions/apiFunctions\";\r\nimport { AppointmentInfo, Specialist } from \"../state/dataTypes\";\r\nimport { CustomerAppointment } from \"../components/CustomerAppointment\";\r\nimport { CustomerSpecialists } from \"../components/CustomerSpecialists\";\r\n\r\ninterface Props {}\r\n\r\nexport function CustomerPanel({}: Props) {\r\n  const {\r\n    gettingSpecialists,\r\n    gettingSpecialistsError,\r\n    specialists,\r\n    postingAppointment,\r\n    appointmentError,\r\n    appointmentInfo,\r\n    unregisteringAppointment,\r\n    unregisteringAppointmentError,\r\n  } = useAppSelector((state) => state.customer);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  function registerWithSpecialist(specialistId: number) {\r\n    registerAppointment(\r\n      specialistId,\r\n      (appointmentInfo: AppointmentInfo) =>\r\n        dispatch(postingAppointmentSuccess(appointmentInfo)),\r\n      (error: Error) => dispatch(postingAppointmentError(error))\r\n    );\r\n  }\r\n\r\n  function trackAppointmentSuccess(appointmentInfo: AppointmentInfo) {\r\n    dispatch(postingAppointmentSuccess(appointmentInfo));\r\n    closeSpecs();\r\n  }\r\n\r\n  let specialistsSource: EventSource | null = null;\r\n\r\n  function closeSpecs() {\r\n    specialistsSource && specialistsSource.close();\r\n  }\r\n\r\n  function closeAppointment() {\r\n    appointmentSource && appointmentSource.close();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!appointmentInfo) {\r\n      specialistsSource = initializeSpecialistsSource(\r\n        (specialists: Specialist[]) =>\r\n          dispatch(specialistsSuccess(specialists)),\r\n        (error: Error) => dispatch(specialistsError(error))\r\n      );\r\n      specialistsSource.addEventListener(\"close\", () =>\r\n        specialistsSource?.close()\r\n      );\r\n    } else {\r\n      closeSpecs();\r\n    }\r\n    return () => {\r\n      closeSpecs();\r\n    };\r\n  }, [appointmentInfo]);\r\n\r\n  function unregister(appointmentId: number) {\r\n    // dispatch(unregisteringAppointment);\r\n    unregisterAppointment(\r\n      appointmentId,\r\n      () => dispatch(unregisteringSuccess()),\r\n      (error: Error) => dispatch(unregisteringError(error))\r\n    );\r\n  }\r\n\r\n  let appointmentSource: EventSource | null = null;\r\n\r\n  useEffect(() => {\r\n    if (appointmentInfo) {\r\n      appointmentSource = initializeWatchedAppointmentSource(\r\n        appointmentInfo.appointmentId,\r\n        trackAppointmentSuccess\r\n      );\r\n\r\n      return () => {\r\n        closeAppointment();\r\n      };\r\n    }\r\n  }, [appointmentInfo]);\r\n\r\n  // useEffect(() => {\r\n  //   return () => {\r\n  //     closeAppointment();\r\n  //     closeSpecs();\r\n  //   };\r\n  // }, [appointmentInfo]);\r\n\r\n  return (\r\n    <div>\r\n      {specialists && !appointmentInfo && (\r\n        <CustomerSpecialists\r\n          registerAppointment={registerWithSpecialist}\r\n          registering={postingAppointment}\r\n          registeringError={appointmentError}\r\n          loadingSpecialists={gettingSpecialists}\r\n          loadingSpecialistsError={gettingSpecialistsError}\r\n          specialists={specialists}\r\n        />\r\n      )}\r\n      {appointmentInfo && (\r\n        <CustomerAppointment\r\n          appointmentInfo={appointmentInfo}\r\n          unregisterAppointment={() =>\r\n            unregister(appointmentInfo.appointmentId)\r\n          }\r\n          unregistering={unregisteringAppointment}\r\n          unregisteringError={unregisteringAppointmentError}\r\n          returnToMenu={() => dispatch(resetCustomerState())}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Card, Col, List, Row } from \"antd\";\r\nimport { Appointment, UserInfo } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  appointments: Appointment[] | undefined;\r\n  appointmentsError?: Error;\r\n  startAppointment: (appointmentId: number) => void;\r\n  endAppointment: (appointmentId: number) => void;\r\n  cancelAppointment: (appointmentId: number) => void;\r\n  updating: boolean;\r\n  updatingError: Error | undefined;\r\n}\r\n\r\nexport function StaffAppointments({\r\n  userInfo,\r\n  appointments,\r\n  appointmentsError,\r\n  startAppointment,\r\n  endAppointment,\r\n  cancelAppointment,\r\n  updating,\r\n  updatingError,\r\n}: Props) {\r\n  const isAdmin = userInfo.authority === \"ADMIN\";\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={12} offset={6}>\r\n          {userInfo && !appointments ? \"Laukiama vizitų duomenų\" : \"Vizitai\"}\r\n        </Col>\r\n      </Row>\r\n      {appointments !== undefined && (\r\n        <Row justify=\"center\">\r\n          <List\r\n            itemLayout=\"horizontal\"\r\n            dataSource={appointments}\r\n            locale={{ emptyText: \"Šiuo metu prisiregistravusių nėra.\" }}\r\n            renderItem={(appointment) => (\r\n              <List.Item>\r\n                <Card\r\n                  bodyStyle={{ display: isAdmin ? \"none\" : undefined }}\r\n                  style={{\r\n                    width: 300,\r\n                    border:\r\n                      appointment.status === \"STARTED\"\r\n                        ? \"5px solid green\"\r\n                        : \"5px solid yellow\",\r\n                  }}\r\n                  title={`${appointment.appointmentId}: ${\r\n                    appointment.status === \"REGISTERED\" ? \"laukia\" : \"vyksta\"\r\n                  }`}\r\n                  extra={\r\n                    !isAdmin && (\r\n                      <Button\r\n                        onClick={() =>\r\n                          cancelAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                        size=\"small\"\r\n                      >\r\n                        atšaukti\r\n                      </Button>\r\n                    )\r\n                  }\r\n                >\r\n                  {!isAdmin && (\r\n                    <>\r\n                      <Button\r\n                        disabled={appointment.status === \"STARTED\"}\r\n                        onClick={() =>\r\n                          startAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                      >\r\n                        pradėti\r\n                      </Button>\r\n                      <Button\r\n                        disabled={appointment.status !== \"STARTED\"}\r\n                        onClick={() =>\r\n                          endAppointment(appointment.appointmentId)\r\n                        }\r\n                        loading={updating}\r\n                      >\r\n                        baigti\r\n                      </Button>\r\n                    </>\r\n                  )}\r\n                </Card>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Row>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Col, Form, Input, Row } from \"antd\";\r\nimport { LoginDetails } from \"../state/dataTypes\";\r\n\r\ninterface Props {\r\n  onSubmit: (values: LoginDetails) => void;\r\n}\r\n\r\nconst layout = {\r\n  labelCol: { span: 8 },\r\n  wrapperCol: { span: 16 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 8, span: 16 },\r\n};\r\n\r\nexport function StaffLogIn({ onSubmit }: Props) {\r\n  return (\r\n    <Row>\r\n      <Form\r\n        {...layout}\r\n        name=\"basic\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n      >\r\n        <Form.Item\r\n          label=\"Vartotojas\"\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Vartotojo vardas būtinas!\" }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Slaptažodis\"\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Slaptažodis būtinas!\" }]}\r\n        >\r\n          <Input.Password />\r\n        </Form.Item>\r\n        <Form.Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Prisijungti\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Row>\r\n  );\r\n}\r\n","import { Button } from \"antd\";\r\nimport { UserInfo } from \"../state/dataTypes\";\r\nimport { Col, Row } from \"antd\";\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  logout: () => void;\r\n}\r\n\r\nexport function StaffUserInfo({ userInfo, logout }: Props) {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col span={6} offset={16}>\r\n          <Row justify=\"end\">\r\n            <Button onClick={logout}>Atsijungti</Button>\r\n          </Row>\r\n          <Row justify=\"end\">\r\n            <div>{`Prisijunges kaip:`}</div>\r\n          </Row>\r\n          <Row justify=\"end\" align=\"middle\">\r\n            <div>\r\n              {userInfo.specialist !== null\r\n                ? userInfo.specialist.specialistInfo\r\n                : userInfo.authority}\r\n            </div>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { Appointment, UserInfo } from \"./dataTypes\";\r\nimport type { RootState } from \"./store\";\r\n\r\n// Define a type for the slice state\r\nexport interface StaffState {\r\n  authenticationHeader: string | undefined;\r\n  userInfo: UserInfo | undefined;\r\n  updatingAppointment: boolean;\r\n  updatingAppointmentError: Error | undefined;\r\n  updatedAppointment: Appointment | undefined;\r\n  appointments: Appointment[] | undefined;\r\n  appointmentsError: Error | undefined;\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: StaffState = {\r\n  authenticationHeader: undefined,\r\n  userInfo: undefined,\r\n  updatingAppointment: false,\r\n  updatingAppointmentError: undefined,\r\n  updatedAppointment: undefined,\r\n  appointments: undefined,\r\n  appointmentsError: undefined,\r\n};\r\n\r\n// const registerWithSpecialist = createAsyncThunk(\r\n//   \"users/fetchByIdStatus\",\r\n//   async (specialistId, thunkAPI) => {\r\n//     const response = await registerAppointment(specialistId);\r\n//     return response.data;\r\n//   }\r\n// );\r\n\r\nexport const staffSlice = createSlice({\r\n  name: \"staff\",\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    setAppointments: (state, action: PayloadAction<Appointment[]>) => {\r\n      state.appointments = action.payload;\r\n      state.appointmentsError = undefined;\r\n    },\r\n    setAppointmentsError: (state, action: PayloadAction<Error>) => {\r\n      state.appointments = undefined;\r\n      state.appointmentsError = action.payload;\r\n    },\r\n    updateAppointment: (state) => {\r\n      state.updatingAppointment = true;\r\n    },\r\n    updateAppointmentError: (state, action: PayloadAction<Error>) => {\r\n      state.updatingAppointment = false;\r\n      state.updatingAppointmentError = action.payload;\r\n    },\r\n    updateAppointmentSuccess: (state, action: PayloadAction<Appointment>) => {\r\n      state.updatingAppointment = false;\r\n      state.updatedAppointment = action.payload;\r\n    },\r\n    setUserInfoAndAuthenticationHeader: (\r\n      state,\r\n      action: PayloadAction<{ userInfo: UserInfo; header: string }>\r\n    ) => {\r\n      const { userInfo, header } = action.payload;\r\n      state.userInfo = userInfo;\r\n      state.authenticationHeader = header;\r\n    },\r\n    resetStaffState: (state) => {\r\n      return initialState;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setAppointments,\r\n  setAppointmentsError,\r\n  setUserInfoAndAuthenticationHeader,\r\n  resetStaffState,\r\n  updateAppointment,\r\n  updateAppointmentError,\r\n  updateAppointmentSuccess,\r\n} = staffSlice.actions;\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectAuthenticationHeader = (state: RootState) =>\r\n  state.staff.authenticationHeader;\r\n\r\nexport default staffSlice.reducer;\r\n","import { Col, Row } from \"antd\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { StaffAppointments } from \"../components/StaffAppointments\";\r\nimport { StaffLogIn } from \"../components/StaffLogIn\";\r\nimport { StaffUserInfo } from \"../components/StaffUserInfo\";\r\nimport {\r\n  authenticateStaffMember,\r\n  // cancelAxiosInterceptors,\r\n  initializeAppointmentsSource,\r\n  unregisterAppointment,\r\n  updateAppointmentStatus,\r\n} from \"../functions/apiFunctions\";\r\nimport { Appointment, LoginDetails, UserInfo } from \"../state/dataTypes\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport {\r\n  selectAuthenticationHeader,\r\n  setAppointments,\r\n  setUserInfoAndAuthenticationHeader,\r\n  resetStaffState,\r\n  updateAppointmentError,\r\n  updateAppointmentSuccess,\r\n} from \"../state/sliceStaff\";\r\n\r\ninterface Props {}\r\n\r\nexport function StaffPanel({}: Props) {\r\n  const isAuthenticated = !!useSelector(selectAuthenticationHeader);\r\n\r\n  const {\r\n    authenticationHeader,\r\n    userInfo,\r\n    updatingAppointment,\r\n    updatingAppointmentError,\r\n    updatedAppointment,\r\n    appointments,\r\n    appointmentsError,\r\n  } = useAppSelector((state) => state.staff);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const setHeaderAndUserInfo = (userInfo: UserInfo, header: string) =>\r\n    dispatch(setUserInfoAndAuthenticationHeader({ userInfo, header }));\r\n\r\n  const logIn = (values: LoginDetails) => {\r\n    authenticateStaffMember(values, setHeaderAndUserInfo);\r\n  };\r\n\r\n  const updateAppointment = (status: string) => (appointmentId: number) => {\r\n    updateAppointmentStatus(\r\n      appointmentId,\r\n      status,\r\n      authenticationHeader || \"\",\r\n      (appointment: Appointment) =>\r\n        dispatch(updateAppointmentSuccess(appointment)),\r\n      (error: Error) => dispatch(updateAppointmentError(error))\r\n    );\r\n  };\r\n\r\n  function logOut(): void {\r\n    // cancelAxiosInterceptors();\r\n    dispatch(resetStaffState());\r\n  }\r\n\r\n  let source: EventSource | null = null;\r\n  useEffect(() => {\r\n    if (userInfo) {\r\n      source = initializeAppointmentsSource(\r\n        (appointments: Appointment[]) =>\r\n          dispatch(setAppointments(appointments)),\r\n        authenticationHeader\r\n      );\r\n    }\r\n    return () => {\r\n      console.log(\"closing appmt\");\r\n\r\n      source && source.close();\r\n    };\r\n  }, [userInfo]);\r\n\r\n  return (\r\n    <>\r\n      {!isAuthenticated && <StaffLogIn onSubmit={logIn} />}\r\n      {isAuthenticated && (\r\n        <Col span={24}>\r\n          <Col span={24}>\r\n            {userInfo && <StaffUserInfo userInfo={userInfo} logout={logOut} />}\r\n          </Col>\r\n          {userInfo && (\r\n            <StaffAppointments\r\n              userInfo={userInfo}\r\n              appointments={appointments}\r\n              appointmentsError={appointmentsError}\r\n              startAppointment={updateAppointment(\"STARTED\")}\r\n              endAppointment={updateAppointment(\"FINISHED\")}\r\n              cancelAppointment={updateAppointment(\"CANCELLED\")}\r\n              updating={updatingAppointment}\r\n              updatingError={appointmentsError}\r\n            />\r\n          )}\r\n        </Col>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { Button, Row, Col, Layout } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggleAppointmentMode } from \"../state/sliceApp\";\r\nimport { useAppSelector } from \"../state/hooks\";\r\nimport { CustomerPanel } from \"./CustomerPanel\";\r\nimport { StaffPanel } from \"./StaffPanel\";\r\nimport { Content, Footer, Header } from \"antd/lib/layout/layout\";\r\n\r\ninterface Props {}\r\n\r\nexport function MainPanel({}: Props) {\r\n  const {\r\n    app: { customerMode },\r\n    customer: { appointmentInfo },\r\n    staff: { userInfo },\r\n  } = useAppSelector((state) => state);\r\n\r\n  const dispatch = useDispatch();\r\n  function toggleMode() {\r\n    dispatch(toggleAppointmentMode());\r\n  }\r\n  return (\r\n    // <Row justify=\"center\">\r\n    <Layout>\r\n      <Header />\r\n      <Content style={{ minHeight: \"30rem\" }}>\r\n        <Col span={24} offset={18}>\r\n          {!appointmentInfo && !userInfo && (\r\n            <Button onClick={toggleMode}>\r\n              {customerMode ? \"Darbuotojams\" : \"Grįžti\"}\r\n            </Button>\r\n          )}\r\n        </Col>\r\n\r\n        <Row justify=\"center\" align=\"middle\">\r\n          {!customerMode && <StaffPanel />}\r\n          {customerMode && <CustomerPanel />}\r\n        </Row>\r\n      </Content>\r\n      <Footer>Serve-On-Spot App, 2021</Footer>\r\n    </Layout>\r\n    //  </Row>\r\n  );\r\n}\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport appReducer from \"./sliceApp\";\r\nimport customerReducer from \"./sliceCustomer\";\r\nimport staffReducer from \"./sliceStaff\";\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    customer: customerReducer,\r\n    staff: staffReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    }),\r\n});\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch;\r\n","import \"./App.css\";\r\nimport { MainPanel } from \"./containers/MainPanel\";\r\nimport { ErrorBoundary } from \"react-error-boundary\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary FallbackComponent={() => <p>whoops</p>}>\r\n        <Provider store={store}>\r\n          <MainPanel />\r\n        </Provider>\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from \"axios\";\r\nimport {\r\n  Appointment,\r\n  AppointmentInfo,\r\n  LoginDetails,\r\n  Specialist,\r\n  UserInfo,\r\n} from \"../state/dataTypes\";\r\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\r\n\r\nexport function initializeSpecialistsSource(\r\n  onSuccess: (specialists: Specialist[]) => void,\r\n  onError: (error: Error) => void\r\n): EventSource {\r\n  const specialistsSource = new EventSource(\r\n    \"http://127.0.0.1:8080/specialists\"\r\n  );\r\n  specialistsSource.onerror = () => {\r\n    onError(new Error(\"Nepavyko gauti specialistų\"));\r\n    if (specialistsSource.readyState === 2) {\r\n      setTimeout(initializeSpecialistsSource, 300);\r\n    }\r\n  };\r\n  specialistsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    console.log(data);\r\n\r\n    onSuccess(data);\r\n  };\r\n  return specialistsSource;\r\n}\r\n\r\nexport function registerAppointment(\r\n  specialistId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void,\r\n  onError: (error: Error) => void\r\n) {\r\n  return axios\r\n    .post(\r\n      `http://localhost:8080/appointments`,\r\n      { specialistId: specialistId },\r\n      {\r\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n      }\r\n    )\r\n    .then((res) => {\r\n      // console.log(res);\r\n      const data = res.data;\r\n      onSuccess(data);\r\n    })\r\n    .catch((error) => {\r\n      // console.log(error);\r\n      onError(error);\r\n    });\r\n}\r\n\r\nexport function initializeWatchedAppointmentSource(\r\n  appointmentId: number,\r\n  onSuccess: (appointmentInfo: AppointmentInfo) => void\r\n): EventSource {\r\n  const appointmentsSource = new EventSource(\r\n    `http://127.0.0.1:8080/appointments/${appointmentId}`\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initializeWatchedAppointmentSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message) => {\r\n    const data = JSON.parse(message.data);\r\n    console.log(\"appointment\", data);\r\n\r\n    onSuccess(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function unregisterAppointment(\r\n  appointmentId: number,\r\n  onSuccess: () => void,\r\n  onError: (error: Error) => void\r\n) {\r\n  return axios\r\n    .patch(\r\n      `http://localhost:8080/appointments/${appointmentId}`,\r\n      { status: \"UNREGISTERED\" },\r\n      {\r\n        headers: { \"Access-Control-Allow-Origin\": \"*\" },\r\n      }\r\n    )\r\n    .then((res) => {\r\n      onSuccess();\r\n    })\r\n    .catch((error) => {\r\n      onError(error);\r\n    });\r\n}\r\n\r\nexport function authenticateStaffMember(\r\n  loginDetais: LoginDetails,\r\n  setAuthHeader: (userInfo: UserInfo, header: string) => void\r\n) {\r\n  const authToken = createBasicAuthToken(loginDetais);\r\n  console.log(authToken);\r\n  return axios\r\n    .get(`http://localhost:8080/user`, {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: authToken,\r\n      },\r\n    })\r\n    .then((res) => {\r\n      const data = res.data;\r\n      console.log(data);\r\n\r\n      setAuthHeader(data, authToken);\r\n      // setupAxiosInterceptors(authToken);\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n    });\r\n}\r\n\r\nexport function initializeAppointmentsSource(\r\n  setCustomers: (appointments: Appointment[]) => void,\r\n  authToken?: string\r\n): EventSource {\r\n  const appointmentsSource = new EventSourcePolyfill(\r\n    \"http://127.0.0.1:8080/appointments\",\r\n    {\r\n      headers: {\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n        authorization: `${authToken}`,\r\n      },\r\n    }\r\n  );\r\n  appointmentsSource.onerror = () => {\r\n    if (appointmentsSource.readyState === 2) {\r\n      setTimeout(initializeAppointmentsSource, 300);\r\n    }\r\n  };\r\n  appointmentsSource.onmessage = (message: any) => {\r\n    const data = JSON.parse(message.data);\r\n    setCustomers(data);\r\n  };\r\n  return appointmentsSource;\r\n}\r\n\r\nexport function updateAppointmentStatus(\r\n  appointmentId: number,\r\n  appointmentStatus: string,\r\n  authToken: string,\r\n  onSuccess: (appointment: Appointment) => void,\r\n  onError: (error: Error) => void\r\n) {\r\n  return axios\r\n    .patch(\r\n      `http://localhost:8080/appointments/${appointmentId}`,\r\n      { status: appointmentStatus },\r\n      {\r\n        headers: {\r\n          authorization: `${authToken}`,\r\n          \"Access-Control-Allow-Origin\": \"http://localhost:3000\",\r\n        },\r\n      }\r\n    )\r\n    .then((res) => {\r\n      onSuccess(res.data);\r\n    })\r\n    .catch((error) => {\r\n      onError(error);\r\n    });\r\n}\r\n\r\nfunction createBasicAuthToken(loginDetails: LoginDetails) {\r\n  const { username, password } = loginDetails;\r\n  const unencodedDetails = username + \":\" + password;\r\n  return \"Basic \" + Buffer.from(unencodedDetails).toString(\"base64\");\r\n}\r\n"],"sourceRoot":""}